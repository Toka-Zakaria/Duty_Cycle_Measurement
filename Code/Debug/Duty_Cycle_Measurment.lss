
Duty_Cycle_Measurment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  000027bc  00002850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080017c  0080017c  0000296c  2**0
                  ALLOC
  3 .stab         00001df4  00000000  00000000  0000296c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fdf  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000573f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000058df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009262  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a438  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b25c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__vector_1>
       8:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_2>
       c:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__vector_3>
      10:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__vector_8>
      24:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__vector_18>
      4c:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <main>
      8a:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e6       	ldi	r22, 0x68	; 104
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 59       	subi	r30, 0x90	; 144
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <EdgeDetection>:


#include"application_functions.h"

void EdgeDetection(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	28 97       	sbiw	r28, 0x08	; 8
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	g_edgeCount++;
     e42:	80 91 82 01 	lds	r24, 0x0182
     e46:	8f 5f       	subi	r24, 0xFF	; 255
     e48:	80 93 82 01 	sts	0x0182, r24


	if(g_edgeCount == FIRST_EDGE)
     e4c:	80 91 82 01 	lds	r24, 0x0182
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	81 f4       	brne	.+32     	; 0xe74 <EdgeDetection+0x46>
	{

		TIMER1_INITIAL_VALUE_REGISTER=0;
     e54:	ec e4       	ldi	r30, 0x4C	; 76
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	11 82       	std	Z+1, r1	; 0x01
     e5a:	10 82       	st	Z, r1

		External_Interrupt_ConfigType edge= {INTERRUPT0,Falling};
     e5c:	19 82       	std	Y+1, r1	; 0x01
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	8a 83       	std	Y+2, r24	; 0x02
		Interrupt_setCallBack(EdgeDetection, INTERRUPT0);
     e62:	87 e1       	ldi	r24, 0x17	; 23
     e64:	97 e0       	ldi	r25, 0x07	; 7
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	0e 94 c2 08 	call	0x1184	; 0x1184 <Interrupt_setCallBack>
		External_Interrupt_init(&edge);
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	0e 94 28 08 	call	0x1050	; 0x1050 <External_Interrupt_init>

	}

	if(g_edgeCount == SECOND_EDGE)
     e74:	80 91 82 01 	lds	r24, 0x0182
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <EdgeDetection+0x76>
	{
		g_timeHigh=  TIMER1_INITIAL_VALUE_REGISTER;
     e7c:	ec e4       	ldi	r30, 0x4C	; 76
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	90 93 84 01 	sts	0x0184, r25
     e88:	80 93 83 01 	sts	0x0183, r24

		External_Interrupt_ConfigType edge= {INTERRUPT0, Raising};
     e8c:	1b 82       	std	Y+3, r1	; 0x03
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	8c 83       	std	Y+4, r24	; 0x04
		Interrupt_setCallBack(EdgeDetection, INTERRUPT0);
     e92:	87 e1       	ldi	r24, 0x17	; 23
     e94:	97 e0       	ldi	r25, 0x07	; 7
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	0e 94 c2 08 	call	0x1184	; 0x1184 <Interrupt_setCallBack>
		External_Interrupt_init(&edge);
     e9c:	ce 01       	movw	r24, r28
     e9e:	03 96       	adiw	r24, 0x03	; 3
     ea0:	0e 94 28 08 	call	0x1050	; 0x1050 <External_Interrupt_init>


	}

	if(g_edgeCount == THIRD_EDGE)
     ea4:	80 91 82 01 	lds	r24, 0x0182
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	a1 f4       	brne	.+40     	; 0xed4 <EdgeDetection+0xa6>
	{
		g_timePeriod = TIMER1_INITIAL_VALUE_REGISTER;
     eac:	ec e4       	ldi	r30, 0x4C	; 76
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	90 93 86 01 	sts	0x0186, r25
     eb8:	80 93 85 01 	sts	0x0185, r24

		External_Interrupt_ConfigType edge= {INTERRUPT0, Falling};
     ebc:	1d 82       	std	Y+5, r1	; 0x05
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	8e 83       	std	Y+6, r24	; 0x06
		Interrupt_setCallBack(EdgeDetection, INTERRUPT0);
     ec2:	87 e1       	ldi	r24, 0x17	; 23
     ec4:	97 e0       	ldi	r25, 0x07	; 7
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	0e 94 c2 08 	call	0x1184	; 0x1184 <Interrupt_setCallBack>
		External_Interrupt_init(&edge);
     ecc:	ce 01       	movw	r24, r28
     ece:	05 96       	adiw	r24, 0x05	; 5
     ed0:	0e 94 28 08 	call	0x1050	; 0x1050 <External_Interrupt_init>

	}


	if(g_edgeCount == FOURTH_EDGE)
     ed4:	80 91 82 01 	lds	r24, 0x0182
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	c1 f4       	brne	.+48     	; 0xf0c <EdgeDetection+0xde>
	{
		g_timePeriodPlusHigh = TIMER1_INITIAL_VALUE_REGISTER;
     edc:	ec e4       	ldi	r30, 0x4C	; 76
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	90 93 88 01 	sts	0x0188, r25
     ee8:	80 93 87 01 	sts	0x0187, r24

		TIMER1_INITIAL_VALUE_REGISTER=0;
     eec:	ec e4       	ldi	r30, 0x4C	; 76
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	11 82       	std	Z+1, r1	; 0x01
     ef2:	10 82       	st	Z, r1

		External_Interrupt_ConfigType edge= {INTERRUPT0, Falling};
     ef4:	1f 82       	std	Y+7, r1	; 0x07
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	88 87       	std	Y+8, r24	; 0x08
		Interrupt_setCallBack(EdgeDetection, INTERRUPT0);
     efa:	87 e1       	ldi	r24, 0x17	; 23
     efc:	97 e0       	ldi	r25, 0x07	; 7
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	0e 94 c2 08 	call	0x1184	; 0x1184 <Interrupt_setCallBack>
		External_Interrupt_init(&edge);
     f04:	ce 01       	movw	r24, r28
     f06:	07 96       	adiw	r24, 0x07	; 7
     f08:	0e 94 28 08 	call	0x1050	; 0x1050 <External_Interrupt_init>

	}


}
     f0c:	28 96       	adiw	r28, 0x08	; 8
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <__vector_1>:
 *                            Interrupt0                                  *
 * ************************************************************************/


ISR(INT0_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	if(g_INT0_callBackPtr != NULL_PTR)
     f48:	80 91 7c 01 	lds	r24, 0x017C
     f4c:	90 91 7d 01 	lds	r25, 0x017D
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	29 f0       	breq	.+10     	; 0xf5e <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     f54:	e0 91 7c 01 	lds	r30, 0x017C
     f58:	f0 91 7d 01 	lds	r31, 0x017D
     f5c:	09 95       	icall
	}
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	ff 91       	pop	r31
     f64:	ef 91       	pop	r30
     f66:	bf 91       	pop	r27
     f68:	af 91       	pop	r26
     f6a:	9f 91       	pop	r25
     f6c:	8f 91       	pop	r24
     f6e:	7f 91       	pop	r23
     f70:	6f 91       	pop	r22
     f72:	5f 91       	pop	r21
     f74:	4f 91       	pop	r20
     f76:	3f 91       	pop	r19
     f78:	2f 91       	pop	r18
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <__vector_2>:
/**************************************************************************
 *                            Interrupt1                                  *
 * ************************************************************************/

ISR(INT1_vect)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	if(g_INT1_callBackPtr != NULL_PTR)
     fae:	80 91 7e 01 	lds	r24, 0x017E
     fb2:	90 91 7f 01 	lds	r25, 0x017F
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     fba:	e0 91 7e 01 	lds	r30, 0x017E
     fbe:	f0 91 7f 01 	lds	r31, 0x017F
     fc2:	09 95       	icall
	}
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	ff 91       	pop	r31
     fca:	ef 91       	pop	r30
     fcc:	bf 91       	pop	r27
     fce:	af 91       	pop	r26
     fd0:	9f 91       	pop	r25
     fd2:	8f 91       	pop	r24
     fd4:	7f 91       	pop	r23
     fd6:	6f 91       	pop	r22
     fd8:	5f 91       	pop	r21
     fda:	4f 91       	pop	r20
     fdc:	3f 91       	pop	r19
     fde:	2f 91       	pop	r18
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_18>:

/**************************************************************************
 *                            Interrupt2                                  *
 * ************************************************************************/
ISR(INT2_vect)
{
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	2f 93       	push	r18
     ff6:	3f 93       	push	r19
     ff8:	4f 93       	push	r20
     ffa:	5f 93       	push	r21
     ffc:	6f 93       	push	r22
     ffe:	7f 93       	push	r23
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	ef 93       	push	r30
    100a:	ff 93       	push	r31
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	if(g_INT2_callBackPtr != NULL_PTR)
    1014:	80 91 80 01 	lds	r24, 0x0180
    1018:	90 91 81 01 	lds	r25, 0x0181
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	29 f0       	breq	.+10     	; 0x102a <__vector_18+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1020:	e0 91 80 01 	lds	r30, 0x0180
    1024:	f0 91 81 01 	lds	r31, 0x0181
    1028:	09 95       	icall
	}
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <External_Interrupt_init>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void External_Interrupt_init(const External_Interrupt_ConfigType* Config_Ptr)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <External_Interrupt_init+0x6>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <External_Interrupt_init+0x8>
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9a 83       	std	Y+2, r25	; 0x02
    105e:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->INT_ID)
    1060:	e9 81       	ldd	r30, Y+1	; 0x01
    1062:	fa 81       	ldd	r31, Y+2	; 0x02
    1064:	80 81       	ld	r24, Z
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3c 83       	std	Y+4, r19	; 0x04
    106c:	2b 83       	std	Y+3, r18	; 0x03
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	61 f1       	breq	.+88     	; 0x10d0 <External_Interrupt_init+0x80>
    1078:	eb 81       	ldd	r30, Y+3	; 0x03
    107a:	fc 81       	ldd	r31, Y+4	; 0x04
    107c:	e2 30       	cpi	r30, 0x02	; 2
    107e:	f1 05       	cpc	r31, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <External_Interrupt_init+0x34>
    1082:	4c c0       	rjmp	.+152    	; 0x111c <External_Interrupt_init+0xcc>
    1084:	2b 81       	ldd	r18, Y+3	; 0x03
    1086:	3c 81       	ldd	r19, Y+4	; 0x04
    1088:	21 15       	cp	r18, r1
    108a:	31 05       	cpc	r19, r1
    108c:	09 f0       	breq	.+2      	; 0x1090 <External_Interrupt_init+0x40>
    108e:	73 c0       	rjmp	.+230    	; 0x1176 <External_Interrupt_init+0x126>
	{

	case INTERRUPT0:

		/*configure pin of interrupt0 as input pin*/
		INTERRUPT0_DIRECTION_PORT = CLEAR_BIT(INTERRUPT0_DIRECTION_PORT, INTERRUPT0_PIN);
    1090:	21 e3       	ldi	r18, 0x31	; 49
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	a1 e3       	ldi	r26, 0x31	; 49
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e1 e3       	ldi	r30, 0x31	; 49
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8b 7f       	andi	r24, 0xFB	; 251
    10a0:	8c 93       	st	X, r24
    10a2:	8c 91       	ld	r24, X
    10a4:	f9 01       	movw	r30, r18
    10a6:	80 83       	st	Z, r24
		}/*end of INTERNAL_PULL_UP_INT0  */
#endif


		/*configure the control edge for interrupt 0*/
		MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XFC) | (Config_Ptr->INT_control) ;
    10a8:	a5 e5       	ldi	r26, 0x55	; 85
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e5 e5       	ldi	r30, 0x55	; 85
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	98 2f       	mov	r25, r24
    10b4:	9c 7f       	andi	r25, 0xFC	; 252
    10b6:	e9 81       	ldd	r30, Y+1	; 0x01
    10b8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ba:	81 81       	ldd	r24, Z+1	; 0x01
    10bc:	89 2b       	or	r24, r25
    10be:	8c 93       	st	X, r24

		/*activate external interrupt 0 interrupt enable*/
		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XBF) | (1<<EXTRNAL_INTERRUPT0_ENABL_BIT);
    10c0:	ab e5       	ldi	r26, 0x5B	; 91
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	eb e5       	ldi	r30, 0x5B	; 91
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	8c 93       	st	X, r24
    10ce:	53 c0       	rjmp	.+166    	; 0x1176 <External_Interrupt_init+0x126>
		break;

	case INTERRUPT1:

		/*configure interrupt 1 pin as input pin*/
		INTERRUPT1_DIRECTION_PORT = CLEAR_BIT(INTERRUPT1_DIRECTION_PORT, INTERRUPT1_PIN);
    10d0:	21 e3       	ldi	r18, 0x31	; 49
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	a1 e3       	ldi	r26, 0x31	; 49
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e1 e3       	ldi	r30, 0x31	; 49
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	87 7f       	andi	r24, 0xF7	; 247
    10e0:	8c 93       	st	X, r24
    10e2:	8c 91       	ld	r24, X
    10e4:	f9 01       	movw	r30, r18
    10e6:	80 83       	st	Z, r24
		}/*end of INTERNAL_PULL_UP_INT0  */
#endif


		/*configure control edge for interrupt 1*/
		MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XF3) | ( (Config_Ptr->INT_control)<< INTERRUPT1_SENSE_CONTROL_BITS);
    10e8:	a5 e5       	ldi	r26, 0x55	; 85
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e5 e5       	ldi	r30, 0x55	; 85
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	28 2f       	mov	r18, r24
    10f4:	23 7f       	andi	r18, 0xF3	; 243
    10f6:	e9 81       	ldd	r30, Y+1	; 0x01
    10f8:	fa 81       	ldd	r31, Y+2	; 0x02
    10fa:	81 81       	ldd	r24, Z+1	; 0x01
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	82 2b       	or	r24, r18
    110a:	8c 93       	st	X, r24

		/*active external interrupt interrupt enable for interrupt 1*/
		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0X7F) | (1<<EXTRNAL_INTERRUPT1_ENABL_BIT);
    110c:	ab e5       	ldi	r26, 0x5B	; 91
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	eb e5       	ldi	r30, 0x5B	; 91
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	8c 93       	st	X, r24
    111a:	2d c0       	rjmp	.+90     	; 0x1176 <External_Interrupt_init+0x126>
		break;

	case INTERRUPT2:

		/*configure interrupt 2 pin as input pin */
		INTERRUPT2_DIRECTION_PORT = CLEAR_BIT(INTERRUPT2_DIRECTION_PORT, INTERRUPT2_PIN);
    111c:	27 e3       	ldi	r18, 0x37	; 55
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	a7 e3       	ldi	r26, 0x37	; 55
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e7 e3       	ldi	r30, 0x37	; 55
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8b 7f       	andi	r24, 0xFB	; 251
    112c:	8c 93       	st	X, r24
    112e:	8c 91       	ld	r24, X
    1130:	f9 01       	movw	r30, r18
    1132:	80 83       	st	Z, r24

		}/*end of INTERNAL_PULL_UP_INT0  */
#endif

		/*configure control edge for interrupt 2*/
		MCU_CONTROL_AND_STATUS_REGISTER = (MCU_CONTROL_AND_STATUS_REGISTER & 0XBF) | ( ((Config_Ptr->INT_control) & 0X01)<< ISC2);
    1134:	a4 e5       	ldi	r26, 0x54	; 84
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e4 e5       	ldi	r30, 0x54	; 84
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	28 2f       	mov	r18, r24
    1140:	2f 7b       	andi	r18, 0xBF	; 191
    1142:	e9 81       	ldd	r30, Y+1	; 0x01
    1144:	fa 81       	ldd	r31, Y+2	; 0x02
    1146:	81 81       	ldd	r24, Z+1	; 0x01
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	81 70       	andi	r24, 0x01	; 1
    114e:	90 70       	andi	r25, 0x00	; 0
    1150:	00 24       	eor	r0, r0
    1152:	96 95       	lsr	r25
    1154:	87 95       	ror	r24
    1156:	07 94       	ror	r0
    1158:	96 95       	lsr	r25
    115a:	87 95       	ror	r24
    115c:	07 94       	ror	r0
    115e:	98 2f       	mov	r25, r24
    1160:	80 2d       	mov	r24, r0
    1162:	82 2b       	or	r24, r18
    1164:	8c 93       	st	X, r24

		/*Active external interrupt interrupt enable*/
		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XCF) | (1<<EXTRNAL_INTERRUPT2_ENABL_BIT);
    1166:	ab e5       	ldi	r26, 0x5B	; 91
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	eb e5       	ldi	r30, 0x5B	; 91
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8f 7c       	andi	r24, 0xCF	; 207
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	8c 93       	st	X, r24
		break;


	}/*end of switch case*/

}/*end of External_Interrupt function*/
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <Interrupt_setCallBack>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void Interrupt_setCallBack(void(*a_ptr)(void), Interrupt_ID Interrupt_type )
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <Interrupt_setCallBack+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <Interrupt_setCallBack+0x8>
    118c:	0f 92       	push	r0
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	6b 83       	std	Y+3, r22	; 0x03

	switch(Interrupt_type)
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	3d 83       	std	Y+5, r19	; 0x05
    11a0:	2c 83       	std	Y+4, r18	; 0x04
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	9d 81       	ldd	r25, Y+5	; 0x05
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	91 05       	cpc	r25, r1
    11aa:	81 f0       	breq	.+32     	; 0x11cc <Interrupt_setCallBack+0x48>
    11ac:	2c 81       	ldd	r18, Y+4	; 0x04
    11ae:	3d 81       	ldd	r19, Y+5	; 0x05
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	91 f0       	breq	.+36     	; 0x11da <Interrupt_setCallBack+0x56>
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	a1 f4       	brne	.+40     	; 0x11e6 <Interrupt_setCallBack+0x62>
	{
	case INTERRUPT0:
		/* Save the address of the Call back function in a global variable */
		g_INT0_callBackPtr = a_ptr;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	90 93 7d 01 	sts	0x017D, r25
    11c6:	80 93 7c 01 	sts	0x017C, r24
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <Interrupt_setCallBack+0x62>
		break;

	case INTERRUPT1:
		/* Save the address of the Call back function in a global variable */
		g_INT1_callBackPtr = a_ptr;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	90 93 7f 01 	sts	0x017F, r25
    11d4:	80 93 7e 01 	sts	0x017E, r24
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <Interrupt_setCallBack+0x62>
		break;

	case INTERRUPT2:
		/* Save the address of the Call back function in a global variable */
		g_INT2_callBackPtr = a_ptr;
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	90 93 81 01 	sts	0x0181, r25
    11e2:	80 93 80 01 	sts	0x0180, r24
		break;
	} /*End of the switch case*/

}/*End of the setCallBack function*/
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <External_Interrupt_Deinit>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void External_Interrupt_Deinit(Interrupt_ID INT_ID)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <External_Interrupt_Deinit+0x6>
    11fc:	0f 92       	push	r0
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01

	switch(INT_ID)
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3b 83       	std	Y+3, r19	; 0x03
    120c:	2a 83       	std	Y+2, r18	; 0x02
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	9b 81       	ldd	r25, Y+3	; 0x03
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	c1 f0       	breq	.+48     	; 0x1248 <External_Interrupt_Deinit+0x52>
    1218:	2a 81       	ldd	r18, Y+2	; 0x02
    121a:	3b 81       	ldd	r19, Y+3	; 0x03
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	11 f1       	breq	.+68     	; 0x1266 <External_Interrupt_Deinit+0x70>
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	61 f5       	brne	.+88     	; 0x1282 <External_Interrupt_Deinit+0x8c>
	{

	case INTERRUPT0:

		/*clear all bits of interrupt 0*/
		MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XFC);
    122a:	a5 e5       	ldi	r26, 0x55	; 85
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e5       	ldi	r30, 0x55	; 85
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8c 7f       	andi	r24, 0xFC	; 252
    1236:	8c 93       	st	X, r24
		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XBF);
    1238:	ab e5       	ldi	r26, 0x5B	; 91
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e5       	ldi	r30, 0x5B	; 91
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8f 7b       	andi	r24, 0xBF	; 191
    1244:	8c 93       	st	X, r24
    1246:	1d c0       	rjmp	.+58     	; 0x1282 <External_Interrupt_Deinit+0x8c>
		break;

	case INTERRUPT1:

		/*clear all bits of interrupt 1*/
		MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XF3);
    1248:	a5 e5       	ldi	r26, 0x55	; 85
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e5       	ldi	r30, 0x55	; 85
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	83 7f       	andi	r24, 0xF3	; 243
    1254:	8c 93       	st	X, r24

		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0X7F);
    1256:	ab e5       	ldi	r26, 0x5B	; 91
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	eb e5       	ldi	r30, 0x5B	; 91
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8f 77       	andi	r24, 0x7F	; 127
    1262:	8c 93       	st	X, r24
    1264:	0e c0       	rjmp	.+28     	; 0x1282 <External_Interrupt_Deinit+0x8c>
		break;


	case INTERRUPT2:
		/*clear all bits of interrupt 2*/
		MCU_CONTROL_AND_STATUS_REGISTER = (MCU_CONTROL_AND_STATUS_REGISTER & 0XBF);
    1266:	a4 e5       	ldi	r26, 0x54	; 84
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e4 e5       	ldi	r30, 0x54	; 84
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8f 7b       	andi	r24, 0xBF	; 191
    1272:	8c 93       	st	X, r24

		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XCF);
    1274:	ab e5       	ldi	r26, 0x5B	; 91
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb e5       	ldi	r30, 0x5B	; 91
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	8f 7c       	andi	r24, 0xCF	; 207
    1280:	8c 93       	st	X, r24
		break;


	}/*end of switch case*/

}/*End of External_Interrupt_Deinit function*/
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    129e:	a1 e3       	ldi	r26, 0x31	; 49
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e1 e3       	ldi	r30, 0x31	; 49
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	80 6b       	ori	r24, 0xB0	; 176
    12aa:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    12ac:	88 e3       	ldi	r24, 0x38	; 56
    12ae:	0e 94 62 09 	call	0x12c4	; 0x12c4 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    12b2:	8c e0       	ldi	r24, 0x0C	; 12
    12b4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	0e 94 62 09 	call	0x12c4	; 0x12c4 <LCD_sendCommand>
}
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	e9 97       	sbiw	r28, 0x39	; 57
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    12da:	a2 e3       	ldi	r26, 0x32	; 50
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e2 e3       	ldi	r30, 0x32	; 50
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8f 7e       	andi	r24, 0xEF	; 239
    12e6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    12e8:	a2 e3       	ldi	r26, 0x32	; 50
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e2 e3       	ldi	r30, 0x32	; 50
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8f 7d       	andi	r24, 0xDF	; 223
    12f4:	8c 93       	st	X, r24
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a0 e8       	ldi	r26, 0x80	; 128
    12fc:	bf e3       	ldi	r27, 0x3F	; 63
    12fe:	8d ab       	std	Y+53, r24	; 0x35
    1300:	9e ab       	std	Y+54, r25	; 0x36
    1302:	af ab       	std	Y+55, r26	; 0x37
    1304:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1306:	6d a9       	ldd	r22, Y+53	; 0x35
    1308:	7e a9       	ldd	r23, Y+54	; 0x36
    130a:	8f a9       	ldd	r24, Y+55	; 0x37
    130c:	98 ad       	ldd	r25, Y+56	; 0x38
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	4a e7       	ldi	r20, 0x7A	; 122
    1314:	53 e4       	ldi	r21, 0x43	; 67
    1316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	89 ab       	std	Y+49, r24	; 0x31
    1320:	9a ab       	std	Y+50, r25	; 0x32
    1322:	ab ab       	std	Y+51, r26	; 0x33
    1324:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1326:	69 a9       	ldd	r22, Y+49	; 0x31
    1328:	7a a9       	ldd	r23, Y+50	; 0x32
    132a:	8b a9       	ldd	r24, Y+51	; 0x33
    132c:	9c a9       	ldd	r25, Y+52	; 0x34
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e8       	ldi	r20, 0x80	; 128
    1334:	5f e3       	ldi	r21, 0x3F	; 63
    1336:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    133a:	88 23       	and	r24, r24
    133c:	2c f4       	brge	.+10     	; 0x1348 <LCD_sendCommand+0x84>
		__ticks = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	98 ab       	std	Y+48, r25	; 0x30
    1344:	8f a7       	std	Y+47, r24	; 0x2f
    1346:	3f c0       	rjmp	.+126    	; 0x13c6 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1348:	69 a9       	ldd	r22, Y+49	; 0x31
    134a:	7a a9       	ldd	r23, Y+50	; 0x32
    134c:	8b a9       	ldd	r24, Y+51	; 0x33
    134e:	9c a9       	ldd	r25, Y+52	; 0x34
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	3f ef       	ldi	r19, 0xFF	; 255
    1354:	4f e7       	ldi	r20, 0x7F	; 127
    1356:	57 e4       	ldi	r21, 0x47	; 71
    1358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    135c:	18 16       	cp	r1, r24
    135e:	4c f5       	brge	.+82     	; 0x13b2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1360:	6d a9       	ldd	r22, Y+53	; 0x35
    1362:	7e a9       	ldd	r23, Y+54	; 0x36
    1364:	8f a9       	ldd	r24, Y+55	; 0x37
    1366:	98 ad       	ldd	r25, Y+56	; 0x38
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	98 ab       	std	Y+48, r25	; 0x30
    1386:	8f a7       	std	Y+47, r24	; 0x2f
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <LCD_sendCommand+0xe4>
    138a:	89 e1       	ldi	r24, 0x19	; 25
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9e a7       	std	Y+46, r25	; 0x2e
    1390:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1392:	8d a5       	ldd	r24, Y+45	; 0x2d
    1394:	9e a5       	ldd	r25, Y+46	; 0x2e
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <LCD_sendCommand+0xd2>
    139a:	9e a7       	std	Y+46, r25	; 0x2e
    139c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139e:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a0:	98 a9       	ldd	r25, Y+48	; 0x30
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	98 ab       	std	Y+48, r25	; 0x30
    13a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13aa:	98 a9       	ldd	r25, Y+48	; 0x30
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	69 f7       	brne	.-38     	; 0x138a <LCD_sendCommand+0xc6>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b2:	69 a9       	ldd	r22, Y+49	; 0x31
    13b4:	7a a9       	ldd	r23, Y+50	; 0x32
    13b6:	8b a9       	ldd	r24, Y+51	; 0x33
    13b8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	98 ab       	std	Y+48, r25	; 0x30
    13c4:	8f a7       	std	Y+47, r24	; 0x2f
    13c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c8:	98 a9       	ldd	r25, Y+48	; 0x30
    13ca:	9c a7       	std	Y+44, r25	; 0x2c
    13cc:	8b a7       	std	Y+43, r24	; 0x2b
    13ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    13d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD_sendCommand+0x10e>
    13d6:	9c a7       	std	Y+44, r25	; 0x2c
    13d8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    13da:	a2 e3       	ldi	r26, 0x32	; 50
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e2 e3       	ldi	r30, 0x32	; 50
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 68       	ori	r24, 0x80	; 128
    13e6:	8c 93       	st	X, r24
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a0 e8       	ldi	r26, 0x80	; 128
    13ee:	bf e3       	ldi	r27, 0x3F	; 63
    13f0:	8f a3       	std	Y+39, r24	; 0x27
    13f2:	98 a7       	std	Y+40, r25	; 0x28
    13f4:	a9 a7       	std	Y+41, r26	; 0x29
    13f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f8:	6f a1       	ldd	r22, Y+39	; 0x27
    13fa:	78 a5       	ldd	r23, Y+40	; 0x28
    13fc:	89 a5       	ldd	r24, Y+41	; 0x29
    13fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	4a e7       	ldi	r20, 0x7A	; 122
    1406:	53 e4       	ldi	r21, 0x43	; 67
    1408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	8b a3       	std	Y+35, r24	; 0x23
    1412:	9c a3       	std	Y+36, r25	; 0x24
    1414:	ad a3       	std	Y+37, r26	; 0x25
    1416:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1418:	6b a1       	ldd	r22, Y+35	; 0x23
    141a:	7c a1       	ldd	r23, Y+36	; 0x24
    141c:	8d a1       	ldd	r24, Y+37	; 0x25
    141e:	9e a1       	ldd	r25, Y+38	; 0x26
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e8       	ldi	r20, 0x80	; 128
    1426:	5f e3       	ldi	r21, 0x3F	; 63
    1428:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    142c:	88 23       	and	r24, r24
    142e:	2c f4       	brge	.+10     	; 0x143a <LCD_sendCommand+0x176>
		__ticks = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	9a a3       	std	Y+34, r25	; 0x22
    1436:	89 a3       	std	Y+33, r24	; 0x21
    1438:	3f c0       	rjmp	.+126    	; 0x14b8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    143a:	6b a1       	ldd	r22, Y+35	; 0x23
    143c:	7c a1       	ldd	r23, Y+36	; 0x24
    143e:	8d a1       	ldd	r24, Y+37	; 0x25
    1440:	9e a1       	ldd	r25, Y+38	; 0x26
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	3f ef       	ldi	r19, 0xFF	; 255
    1446:	4f e7       	ldi	r20, 0x7F	; 127
    1448:	57 e4       	ldi	r21, 0x47	; 71
    144a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    144e:	18 16       	cp	r1, r24
    1450:	4c f5       	brge	.+82     	; 0x14a4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1452:	6f a1       	ldd	r22, Y+39	; 0x27
    1454:	78 a5       	ldd	r23, Y+40	; 0x28
    1456:	89 a5       	ldd	r24, Y+41	; 0x29
    1458:	9a a5       	ldd	r25, Y+42	; 0x2a
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e2       	ldi	r20, 0x20	; 32
    1460:	51 e4       	ldi	r21, 0x41	; 65
    1462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	bc 01       	movw	r22, r24
    146c:	cd 01       	movw	r24, r26
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9a a3       	std	Y+34, r25	; 0x22
    1478:	89 a3       	std	Y+33, r24	; 0x21
    147a:	0f c0       	rjmp	.+30     	; 0x149a <LCD_sendCommand+0x1d6>
    147c:	89 e1       	ldi	r24, 0x19	; 25
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	8f 8f       	std	Y+31, r24	; 0x1f
    1484:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1486:	98 a1       	ldd	r25, Y+32	; 0x20
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <LCD_sendCommand+0x1c4>
    148c:	98 a3       	std	Y+32, r25	; 0x20
    148e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1490:	89 a1       	ldd	r24, Y+33	; 0x21
    1492:	9a a1       	ldd	r25, Y+34	; 0x22
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	9a a3       	std	Y+34, r25	; 0x22
    1498:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149a:	89 a1       	ldd	r24, Y+33	; 0x21
    149c:	9a a1       	ldd	r25, Y+34	; 0x22
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	69 f7       	brne	.-38     	; 0x147c <LCD_sendCommand+0x1b8>
    14a2:	14 c0       	rjmp	.+40     	; 0x14cc <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a4:	6b a1       	ldd	r22, Y+35	; 0x23
    14a6:	7c a1       	ldd	r23, Y+36	; 0x24
    14a8:	8d a1       	ldd	r24, Y+37	; 0x25
    14aa:	9e a1       	ldd	r25, Y+38	; 0x26
    14ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	9a a3       	std	Y+34, r25	; 0x22
    14b6:	89 a3       	std	Y+33, r24	; 0x21
    14b8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ba:	9a a1       	ldd	r25, Y+34	; 0x22
    14bc:	9e 8f       	std	Y+30, r25	; 0x1e
    14be:	8d 8f       	std	Y+29, r24	; 0x1d
    14c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <LCD_sendCommand+0x200>
    14c8:	9e 8f       	std	Y+30, r25	; 0x1e
    14ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    14cc:	e5 e3       	ldi	r30, 0x35	; 53
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	89 ad       	ldd	r24, Y+57	; 0x39
    14d2:	80 83       	st	Z, r24
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e8       	ldi	r26, 0x80	; 128
    14da:	bf e3       	ldi	r27, 0x3F	; 63
    14dc:	89 8f       	std	Y+25, r24	; 0x19
    14de:	9a 8f       	std	Y+26, r25	; 0x1a
    14e0:	ab 8f       	std	Y+27, r26	; 0x1b
    14e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	69 8d       	ldd	r22, Y+25	; 0x19
    14e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a e7       	ldi	r20, 0x7A	; 122
    14f2:	53 e4       	ldi	r21, 0x43	; 67
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8d 8b       	std	Y+21, r24	; 0x15
    14fe:	9e 8b       	std	Y+22, r25	; 0x16
    1500:	af 8b       	std	Y+23, r26	; 0x17
    1502:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1504:	6d 89       	ldd	r22, Y+21	; 0x15
    1506:	7e 89       	ldd	r23, Y+22	; 0x16
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <LCD_sendCommand+0x262>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9c 8b       	std	Y+20, r25	; 0x14
    1522:	8b 8b       	std	Y+19, r24	; 0x13
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1526:	6d 89       	ldd	r22, Y+21	; 0x15
    1528:	7e 89       	ldd	r23, Y+22	; 0x16
    152a:	8f 89       	ldd	r24, Y+23	; 0x17
    152c:	98 8d       	ldd	r25, Y+24	; 0x18
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	69 8d       	ldd	r22, Y+25	; 0x19
    1540:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1542:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1544:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9c 8b       	std	Y+20, r25	; 0x14
    1564:	8b 8b       	std	Y+19, r24	; 0x13
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <LCD_sendCommand+0x2c2>
    1568:	89 e1       	ldi	r24, 0x19	; 25
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9a 8b       	std	Y+18, r25	; 0x12
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	89 89       	ldd	r24, Y+17	; 0x11
    1572:	9a 89       	ldd	r25, Y+18	; 0x12
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <LCD_sendCommand+0x2b0>
    1578:	9a 8b       	std	Y+18, r25	; 0x12
    157a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8b 89       	ldd	r24, Y+19	; 0x13
    157e:	9c 89       	ldd	r25, Y+20	; 0x14
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9c 8b       	std	Y+20, r25	; 0x14
    1584:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <LCD_sendCommand+0x2a4>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6d 89       	ldd	r22, Y+21	; 0x15
    1592:	7e 89       	ldd	r23, Y+22	; 0x16
    1594:	8f 89       	ldd	r24, Y+23	; 0x17
    1596:	98 8d       	ldd	r25, Y+24	; 0x18
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9c 8b       	std	Y+20, r25	; 0x14
    15a2:	8b 8b       	std	Y+19, r24	; 0x13
    15a4:	8b 89       	ldd	r24, Y+19	; 0x13
    15a6:	9c 89       	ldd	r25, Y+20	; 0x14
    15a8:	98 8b       	std	Y+16, r25	; 0x10
    15aa:	8f 87       	std	Y+15, r24	; 0x0f
    15ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ae:	98 89       	ldd	r25, Y+16	; 0x10
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <LCD_sendCommand+0x2ec>
    15b4:	98 8b       	std	Y+16, r25	; 0x10
    15b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    15b8:	a2 e3       	ldi	r26, 0x32	; 50
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e2 e3       	ldi	r30, 0x32	; 50
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 77       	andi	r24, 0x7F	; 127
    15c4:	8c 93       	st	X, r24
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a0 e8       	ldi	r26, 0x80	; 128
    15cc:	bf e3       	ldi	r27, 0x3F	; 63
    15ce:	8b 87       	std	Y+11, r24	; 0x0b
    15d0:	9c 87       	std	Y+12, r25	; 0x0c
    15d2:	ad 87       	std	Y+13, r26	; 0x0d
    15d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15da:	8d 85       	ldd	r24, Y+13	; 0x0d
    15dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	4a e7       	ldi	r20, 0x7A	; 122
    15e4:	53 e4       	ldi	r21, 0x43	; 67
    15e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	8f 83       	std	Y+7, r24	; 0x07
    15f0:	98 87       	std	Y+8, r25	; 0x08
    15f2:	a9 87       	std	Y+9, r26	; 0x09
    15f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f6:	6f 81       	ldd	r22, Y+7	; 0x07
    15f8:	78 85       	ldd	r23, Y+8	; 0x08
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e8       	ldi	r20, 0x80	; 128
    1604:	5f e3       	ldi	r21, 0x3F	; 63
    1606:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    160a:	88 23       	and	r24, r24
    160c:	2c f4       	brge	.+10     	; 0x1618 <LCD_sendCommand+0x354>
		__ticks = 1;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9e 83       	std	Y+6, r25	; 0x06
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	3f c0       	rjmp	.+126    	; 0x1696 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1618:	6f 81       	ldd	r22, Y+7	; 0x07
    161a:	78 85       	ldd	r23, Y+8	; 0x08
    161c:	89 85       	ldd	r24, Y+9	; 0x09
    161e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	3f ef       	ldi	r19, 0xFF	; 255
    1624:	4f e7       	ldi	r20, 0x7F	; 127
    1626:	57 e4       	ldi	r21, 0x47	; 71
    1628:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    162c:	18 16       	cp	r1, r24
    162e:	4c f5       	brge	.+82     	; 0x1682 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1630:	6b 85       	ldd	r22, Y+11	; 0x0b
    1632:	7c 85       	ldd	r23, Y+12	; 0x0c
    1634:	8d 85       	ldd	r24, Y+13	; 0x0d
    1636:	9e 85       	ldd	r25, Y+14	; 0x0e
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e2       	ldi	r20, 0x20	; 32
    163e:	51 e4       	ldi	r21, 0x41	; 65
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	0f c0       	rjmp	.+30     	; 0x1678 <LCD_sendCommand+0x3b4>
    165a:	89 e1       	ldi	r24, 0x19	; 25
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9c 83       	std	Y+4, r25	; 0x04
    1660:	8b 83       	std	Y+3, r24	; 0x03
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <LCD_sendCommand+0x3a2>
    166a:	9c 83       	std	Y+4, r25	; 0x04
    166c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	69 f7       	brne	.-38     	; 0x165a <LCD_sendCommand+0x396>
    1680:	14 c0       	rjmp	.+40     	; 0x16aa <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1682:	6f 81       	ldd	r22, Y+7	; 0x07
    1684:	78 85       	ldd	r23, Y+8	; 0x08
    1686:	89 85       	ldd	r24, Y+9	; 0x09
    1688:	9a 85       	ldd	r25, Y+10	; 0x0a
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9e 83       	std	Y+6, r25	; 0x06
    1694:	8d 83       	std	Y+5, r24	; 0x05
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	9a 83       	std	Y+2, r25	; 0x02
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <LCD_sendCommand+0x3de>
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    16aa:	e9 96       	adiw	r28, 0x39	; 57
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	e9 97       	sbiw	r28, 0x39	; 57
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    16d2:	a2 e3       	ldi	r26, 0x32	; 50
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e2 e3       	ldi	r30, 0x32	; 50
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    16e0:	a2 e3       	ldi	r26, 0x32	; 50
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e2 e3       	ldi	r30, 0x32	; 50
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 7d       	andi	r24, 0xDF	; 223
    16ec:	8c 93       	st	X, r24
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e8       	ldi	r26, 0x80	; 128
    16f4:	bf e3       	ldi	r27, 0x3F	; 63
    16f6:	8d ab       	std	Y+53, r24	; 0x35
    16f8:	9e ab       	std	Y+54, r25	; 0x36
    16fa:	af ab       	std	Y+55, r26	; 0x37
    16fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1700:	7e a9       	ldd	r23, Y+54	; 0x36
    1702:	8f a9       	ldd	r24, Y+55	; 0x37
    1704:	98 ad       	ldd	r25, Y+56	; 0x38
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4a e7       	ldi	r20, 0x7A	; 122
    170c:	53 e4       	ldi	r21, 0x43	; 67
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	89 ab       	std	Y+49, r24	; 0x31
    1718:	9a ab       	std	Y+50, r25	; 0x32
    171a:	ab ab       	std	Y+51, r26	; 0x33
    171c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    171e:	69 a9       	ldd	r22, Y+49	; 0x31
    1720:	7a a9       	ldd	r23, Y+50	; 0x32
    1722:	8b a9       	ldd	r24, Y+51	; 0x33
    1724:	9c a9       	ldd	r25, Y+52	; 0x34
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1732:	88 23       	and	r24, r24
    1734:	2c f4       	brge	.+10     	; 0x1740 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	98 ab       	std	Y+48, r25	; 0x30
    173c:	8f a7       	std	Y+47, r24	; 0x2f
    173e:	3f c0       	rjmp	.+126    	; 0x17be <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1740:	69 a9       	ldd	r22, Y+49	; 0x31
    1742:	7a a9       	ldd	r23, Y+50	; 0x32
    1744:	8b a9       	ldd	r24, Y+51	; 0x33
    1746:	9c a9       	ldd	r25, Y+52	; 0x34
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	57 e4       	ldi	r21, 0x47	; 71
    1750:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	4c f5       	brge	.+82     	; 0x17aa <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1758:	6d a9       	ldd	r22, Y+53	; 0x35
    175a:	7e a9       	ldd	r23, Y+54	; 0x36
    175c:	8f a9       	ldd	r24, Y+55	; 0x37
    175e:	98 ad       	ldd	r25, Y+56	; 0x38
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e2       	ldi	r20, 0x20	; 32
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	98 ab       	std	Y+48, r25	; 0x30
    177e:	8f a7       	std	Y+47, r24	; 0x2f
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <LCD_displayCharacter+0xe4>
    1782:	89 e1       	ldi	r24, 0x19	; 25
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9e a7       	std	Y+46, r25	; 0x2e
    1788:	8d a7       	std	Y+45, r24	; 0x2d
    178a:	8d a5       	ldd	r24, Y+45	; 0x2d
    178c:	9e a5       	ldd	r25, Y+46	; 0x2e
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_displayCharacter+0xd2>
    1792:	9e a7       	std	Y+46, r25	; 0x2e
    1794:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1796:	8f a5       	ldd	r24, Y+47	; 0x2f
    1798:	98 a9       	ldd	r25, Y+48	; 0x30
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	98 ab       	std	Y+48, r25	; 0x30
    179e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a2:	98 a9       	ldd	r25, Y+48	; 0x30
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	69 f7       	brne	.-38     	; 0x1782 <LCD_displayCharacter+0xc6>
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17aa:	69 a9       	ldd	r22, Y+49	; 0x31
    17ac:	7a a9       	ldd	r23, Y+50	; 0x32
    17ae:	8b a9       	ldd	r24, Y+51	; 0x33
    17b0:	9c a9       	ldd	r25, Y+52	; 0x34
    17b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	98 ab       	std	Y+48, r25	; 0x30
    17bc:	8f a7       	std	Y+47, r24	; 0x2f
    17be:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c0:	98 a9       	ldd	r25, Y+48	; 0x30
    17c2:	9c a7       	std	Y+44, r25	; 0x2c
    17c4:	8b a7       	std	Y+43, r24	; 0x2b
    17c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_displayCharacter+0x10e>
    17ce:	9c a7       	std	Y+44, r25	; 0x2c
    17d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    17d2:	a2 e3       	ldi	r26, 0x32	; 50
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e2 e3       	ldi	r30, 0x32	; 50
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 68       	ori	r24, 0x80	; 128
    17de:	8c 93       	st	X, r24
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e8       	ldi	r26, 0x80	; 128
    17e6:	bf e3       	ldi	r27, 0x3F	; 63
    17e8:	8f a3       	std	Y+39, r24	; 0x27
    17ea:	98 a7       	std	Y+40, r25	; 0x28
    17ec:	a9 a7       	std	Y+41, r26	; 0x29
    17ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	6f a1       	ldd	r22, Y+39	; 0x27
    17f2:	78 a5       	ldd	r23, Y+40	; 0x28
    17f4:	89 a5       	ldd	r24, Y+41	; 0x29
    17f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a e7       	ldi	r20, 0x7A	; 122
    17fe:	53 e4       	ldi	r21, 0x43	; 67
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8b a3       	std	Y+35, r24	; 0x23
    180a:	9c a3       	std	Y+36, r25	; 0x24
    180c:	ad a3       	std	Y+37, r26	; 0x25
    180e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1810:	6b a1       	ldd	r22, Y+35	; 0x23
    1812:	7c a1       	ldd	r23, Y+36	; 0x24
    1814:	8d a1       	ldd	r24, Y+37	; 0x25
    1816:	9e a1       	ldd	r25, Y+38	; 0x26
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9a a3       	std	Y+34, r25	; 0x22
    182e:	89 a3       	std	Y+33, r24	; 0x21
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1832:	6b a1       	ldd	r22, Y+35	; 0x23
    1834:	7c a1       	ldd	r23, Y+36	; 0x24
    1836:	8d a1       	ldd	r24, Y+37	; 0x25
    1838:	9e a1       	ldd	r25, Y+38	; 0x26
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	6f a1       	ldd	r22, Y+39	; 0x27
    184c:	78 a5       	ldd	r23, Y+40	; 0x28
    184e:	89 a5       	ldd	r24, Y+41	; 0x29
    1850:	9a a5       	ldd	r25, Y+42	; 0x2a
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9a a3       	std	Y+34, r25	; 0x22
    1870:	89 a3       	std	Y+33, r24	; 0x21
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <LCD_displayCharacter+0x1d6>
    1874:	89 e1       	ldi	r24, 0x19	; 25
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	98 a3       	std	Y+32, r25	; 0x20
    187a:	8f 8f       	std	Y+31, r24	; 0x1f
    187c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187e:	98 a1       	ldd	r25, Y+32	; 0x20
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_displayCharacter+0x1c4>
    1884:	98 a3       	std	Y+32, r25	; 0x20
    1886:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	89 a1       	ldd	r24, Y+33	; 0x21
    188a:	9a a1       	ldd	r25, Y+34	; 0x22
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9a a3       	std	Y+34, r25	; 0x22
    1890:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	89 a1       	ldd	r24, Y+33	; 0x21
    1894:	9a a1       	ldd	r25, Y+34	; 0x22
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <LCD_displayCharacter+0x1b8>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6b a1       	ldd	r22, Y+35	; 0x23
    189e:	7c a1       	ldd	r23, Y+36	; 0x24
    18a0:	8d a1       	ldd	r24, Y+37	; 0x25
    18a2:	9e a1       	ldd	r25, Y+38	; 0x26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9a a3       	std	Y+34, r25	; 0x22
    18ae:	89 a3       	std	Y+33, r24	; 0x21
    18b0:	89 a1       	ldd	r24, Y+33	; 0x21
    18b2:	9a a1       	ldd	r25, Y+34	; 0x22
    18b4:	9e 8f       	std	Y+30, r25	; 0x1e
    18b6:	8d 8f       	std	Y+29, r24	; 0x1d
    18b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_displayCharacter+0x200>
    18c0:	9e 8f       	std	Y+30, r25	; 0x1e
    18c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    18c4:	e5 e3       	ldi	r30, 0x35	; 53
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	89 ad       	ldd	r24, Y+57	; 0x39
    18ca:	80 83       	st	Z, r24
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 e8       	ldi	r26, 0x80	; 128
    18d2:	bf e3       	ldi	r27, 0x3F	; 63
    18d4:	89 8f       	std	Y+25, r24	; 0x19
    18d6:	9a 8f       	std	Y+26, r25	; 0x1a
    18d8:	ab 8f       	std	Y+27, r26	; 0x1b
    18da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	69 8d       	ldd	r22, Y+25	; 0x19
    18de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a e7       	ldi	r20, 0x7A	; 122
    18ea:	53 e4       	ldi	r21, 0x43	; 67
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8d 8b       	std	Y+21, r24	; 0x15
    18f6:	9e 8b       	std	Y+22, r25	; 0x16
    18f8:	af 8b       	std	Y+23, r26	; 0x17
    18fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18fc:	6d 89       	ldd	r22, Y+21	; 0x15
    18fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1900:	8f 89       	ldd	r24, Y+23	; 0x17
    1902:	98 8d       	ldd	r25, Y+24	; 0x18
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <LCD_displayCharacter+0x262>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9c 8b       	std	Y+20, r25	; 0x14
    191a:	8b 8b       	std	Y+19, r24	; 0x13
    191c:	3f c0       	rjmp	.+126    	; 0x199c <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    191e:	6d 89       	ldd	r22, Y+21	; 0x15
    1920:	7e 89       	ldd	r23, Y+22	; 0x16
    1922:	8f 89       	ldd	r24, Y+23	; 0x17
    1924:	98 8d       	ldd	r25, Y+24	; 0x18
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	69 8d       	ldd	r22, Y+25	; 0x19
    1938:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9c 8b       	std	Y+20, r25	; 0x14
    195c:	8b 8b       	std	Y+19, r24	; 0x13
    195e:	0f c0       	rjmp	.+30     	; 0x197e <LCD_displayCharacter+0x2c2>
    1960:	89 e1       	ldi	r24, 0x19	; 25
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	89 8b       	std	Y+17, r24	; 0x11
    1968:	89 89       	ldd	r24, Y+17	; 0x11
    196a:	9a 89       	ldd	r25, Y+18	; 0x12
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_displayCharacter+0x2b0>
    1970:	9a 8b       	std	Y+18, r25	; 0x12
    1972:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9c 8b       	std	Y+20, r25	; 0x14
    197c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	9c 89       	ldd	r25, Y+20	; 0x14
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <LCD_displayCharacter+0x2a4>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6d 89       	ldd	r22, Y+21	; 0x15
    198a:	7e 89       	ldd	r23, Y+22	; 0x16
    198c:	8f 89       	ldd	r24, Y+23	; 0x17
    198e:	98 8d       	ldd	r25, Y+24	; 0x18
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9c 8b       	std	Y+20, r25	; 0x14
    199a:	8b 8b       	std	Y+19, r24	; 0x13
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	98 8b       	std	Y+16, r25	; 0x10
    19a2:	8f 87       	std	Y+15, r24	; 0x0f
    19a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a6:	98 89       	ldd	r25, Y+16	; 0x10
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <LCD_displayCharacter+0x2ec>
    19ac:	98 8b       	std	Y+16, r25	; 0x10
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    19b0:	a2 e3       	ldi	r26, 0x32	; 50
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e2 e3       	ldi	r30, 0x32	; 50
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	8f 77       	andi	r24, 0x7F	; 127
    19bc:	8c 93       	st	X, r24
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e8       	ldi	r26, 0x80	; 128
    19c4:	bf e3       	ldi	r27, 0x3F	; 63
    19c6:	8b 87       	std	Y+11, r24	; 0x0b
    19c8:	9c 87       	std	Y+12, r25	; 0x0c
    19ca:	ad 87       	std	Y+13, r26	; 0x0d
    19cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a e7       	ldi	r20, 0x7A	; 122
    19dc:	53 e4       	ldi	r21, 0x43	; 67
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	8f 83       	std	Y+7, r24	; 0x07
    19e8:	98 87       	std	Y+8, r25	; 0x08
    19ea:	a9 87       	std	Y+9, r26	; 0x09
    19ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <LCD_displayCharacter+0x354>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1a10:	6f 81       	ldd	r22, Y+7	; 0x07
    1a12:	78 85       	ldd	r23, Y+8	; 0x08
    1a14:	89 85       	ldd	r24, Y+9	; 0x09
    1a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <LCD_displayCharacter+0x3b4>
    1a52:	89 e1       	ldi	r24, 0x19	; 25
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9c 83       	std	Y+4, r25	; 0x04
    1a58:	8b 83       	std	Y+3, r24	; 0x03
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_displayCharacter+0x3a2>
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <LCD_displayCharacter+0x396>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_displayCharacter+0x3de>
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1aa2:	e9 96       	adiw	r28, 0x39	; 57
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <LCD_displayString+0x6>
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	9b 83       	std	Y+3, r25	; 0x03
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ac4:	19 82       	std	Y+1, r1	; 0x01
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	e2 0f       	add	r30, r18
    1ad6:	f3 1f       	adc	r31, r19
    1ad8:	80 81       	ld	r24, Z
    1ada:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_displayCharacter>
		i++;
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	8f 5f       	subi	r24, 0xFF	; 255
    1ae2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	9b 81       	ldd	r25, Y+3	; 0x03
    1aee:	fc 01       	movw	r30, r24
    1af0:	e2 0f       	add	r30, r18
    1af2:	f3 1f       	adc	r31, r19
    1af4:	80 81       	ld	r24, Z
    1af6:	88 23       	and	r24, r24
    1af8:	39 f7       	brne	.-50     	; 0x1ac8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <LCD_goToRowColumn+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <LCD_goToRowColumn+0x8>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8a 83       	std	Y+2, r24	; 0x02
    1b16:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	c1 f0       	breq	.+48     	; 0x1b5c <LCD_goToRowColumn+0x56>
    1b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <LCD_goToRowColumn+0x3a>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <LCD_goToRowColumn+0x50>
    1b3e:	19 c0       	rjmp	.+50     	; 0x1b72 <LCD_goToRowColumn+0x6c>
    1b40:	2c 81       	ldd	r18, Y+4	; 0x04
    1b42:	3d 81       	ldd	r19, Y+5	; 0x05
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	69 f0       	breq	.+26     	; 0x1b64 <LCD_goToRowColumn+0x5e>
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	91 05       	cpc	r25, r1
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <LCD_goToRowColumn+0x66>
    1b54:	0e c0       	rjmp	.+28     	; 0x1b72 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	0b c0       	rjmp	.+22     	; 0x1b72 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	80 5c       	subi	r24, 0xC0	; 192
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	80 5f       	subi	r24, 0xF0	; 240
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	80 5b       	subi	r24, 0xB0	; 176
    1b70:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	80 68       	ori	r24, 0x80	; 128
    1b76:	0e 94 62 09 	call	0x12c4	; 0x12c4 <LCD_sendCommand>
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <LCD_displayStringRowColumn+0x6>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <LCD_displayStringRowColumn+0x8>
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	6a 83       	std	Y+2, r22	; 0x02
    1b9a:	5c 83       	std	Y+4, r21	; 0x04
    1b9c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_displayString>
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	62 97       	sbiw	r28, 0x12	; 18
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	9a 8b       	std	Y+18, r25	; 0x12
    1bd2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1bd4:	89 89       	ldd	r24, Y+17	; 0x11
    1bd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd8:	9e 01       	movw	r18, r28
    1bda:	2f 5f       	subi	r18, 0xFF	; 255
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	b9 01       	movw	r22, r18
    1be0:	4a e0       	ldi	r20, 0x0A	; 10
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	0e 94 97 13 	call	0x272e	; 0x272e <itoa>
   LCD_displayString(buff);
    1be8:	ce 01       	movw	r24, r28
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_displayString>
}
    1bf0:	62 96       	adiw	r28, 0x12	; 18
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <LCD_sendCommand>
}
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <main>:
uint16 g_timePeriodPlusHigh = 0;



int main(void)
{
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	66 97       	sbiw	r28, 0x16	; 22
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
	uint32 dutyCycle = 0;
    1c32:	19 82       	std	Y+1, r1	; 0x01
    1c34:	1a 82       	std	Y+2, r1	; 0x02
    1c36:	1b 82       	std	Y+3, r1	; 0x03
    1c38:	1c 82       	std	Y+4, r1	; 0x04
	SREG |= (1<<7);
    1c3a:	af e5       	ldi	r26, 0x5F	; 95
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	ef e5       	ldi	r30, 0x5F	; 95
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	80 68       	ori	r24, 0x80	; 128
    1c46:	8c 93       	st	X, r24

	LCD_init();
    1c48:	0e 94 47 09 	call	0x128e	; 0x128e <LCD_init>

	External_Interrupt_ConfigType edge= {INTERRUPT0, Raising};
    1c4c:	1d 82       	std	Y+5, r1	; 0x05
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	8e 83       	std	Y+6, r24	; 0x06


	Timer_ConfigType timer= {0,0, Timer1, F_CPU_CLOCK, Overflow};
    1c52:	ae 01       	movw	r20, r28
    1c54:	49 5f       	subi	r20, 0xF9	; 249
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	5b 8b       	std	Y+19, r21	; 0x13
    1c5a:	4a 8b       	std	Y+18, r20	; 0x12
    1c5c:	80 e7       	ldi	r24, 0x70	; 112
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	9d 8b       	std	Y+21, r25	; 0x15
    1c62:	8c 8b       	std	Y+20, r24	; 0x14
    1c64:	9b e0       	ldi	r25, 0x0B	; 11
    1c66:	9e 8b       	std	Y+22, r25	; 0x16
    1c68:	ec 89       	ldd	r30, Y+20	; 0x14
    1c6a:	fd 89       	ldd	r31, Y+21	; 0x15
    1c6c:	00 80       	ld	r0, Z
    1c6e:	4c 89       	ldd	r20, Y+20	; 0x14
    1c70:	5d 89       	ldd	r21, Y+21	; 0x15
    1c72:	4f 5f       	subi	r20, 0xFF	; 255
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255
    1c76:	5d 8b       	std	Y+21, r21	; 0x15
    1c78:	4c 8b       	std	Y+20, r20	; 0x14
    1c7a:	ea 89       	ldd	r30, Y+18	; 0x12
    1c7c:	fb 89       	ldd	r31, Y+19	; 0x13
    1c7e:	00 82       	st	Z, r0
    1c80:	4a 89       	ldd	r20, Y+18	; 0x12
    1c82:	5b 89       	ldd	r21, Y+19	; 0x13
    1c84:	4f 5f       	subi	r20, 0xFF	; 255
    1c86:	5f 4f       	sbci	r21, 0xFF	; 255
    1c88:	5b 8b       	std	Y+19, r21	; 0x13
    1c8a:	4a 8b       	std	Y+18, r20	; 0x12
    1c8c:	5e 89       	ldd	r21, Y+22	; 0x16
    1c8e:	51 50       	subi	r21, 0x01	; 1
    1c90:	5e 8b       	std	Y+22, r21	; 0x16
    1c92:	8e 89       	ldd	r24, Y+22	; 0x16
    1c94:	88 23       	and	r24, r24
    1c96:	41 f7       	brne	.-48     	; 0x1c68 <main+0x52>



	/*start the timer*/
	//Timer_setCallBack(timer_func, Timer1);
	Timer_init(&timer);
    1c98:	ce 01       	movw	r24, r28
    1c9a:	07 96       	adiw	r24, 0x07	; 7
    1c9c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <Timer_init>

	/*start interrupt*/
	Interrupt_setCallBack(EdgeDetection, INTERRUPT0);
    1ca0:	87 e1       	ldi	r24, 0x17	; 23
    1ca2:	97 e0       	ldi	r25, 0x07	; 7
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	0e 94 c2 08 	call	0x1184	; 0x1184 <Interrupt_setCallBack>
	External_Interrupt_init(&edge);
    1caa:	ce 01       	movw	r24, r28
    1cac:	05 96       	adiw	r24, 0x05	; 5
    1cae:	0e 94 28 08 	call	0x1050	; 0x1050 <External_Interrupt_init>


	while(1)
	{

		if(g_edgeCount == 4)
    1cb2:	80 91 82 01 	lds	r24, 0x0182
    1cb6:	84 30       	cpi	r24, 0x04	; 4
    1cb8:	e1 f7       	brne	.-8      	; 0x1cb2 <main+0x9c>
		{
			Timer_DeInit(Timer1);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Timer_DeInit>
			External_Interrupt_Deinit(INTERRUPT0);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <External_Interrupt_Deinit>

			g_edgeCount = 0;
    1cc6:	10 92 82 01 	sts	0x0182, r1
			LCD_displayString("Duty = ");
    1cca:	80 e6       	ldi	r24, 0x60	; 96
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <LCD_displayString>
			/* calculate the dutyCycle */
			dutyCycle = ((float)(g_timePeriodPlusHigh-g_timePeriod) / (g_timePeriodPlusHigh - g_timeHigh)) * 100;
    1cd2:	20 91 87 01 	lds	r18, 0x0187
    1cd6:	30 91 88 01 	lds	r19, 0x0188
    1cda:	80 91 85 01 	lds	r24, 0x0185
    1cde:	90 91 86 01 	lds	r25, 0x0186
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	e8 1b       	sub	r30, r24
    1ce6:	f9 0b       	sbc	r31, r25
    1ce8:	cf 01       	movw	r24, r30
    1cea:	cc 01       	movw	r24, r24
    1cec:	a0 e0       	ldi	r26, 0x00	; 0
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1cf8:	7b 01       	movw	r14, r22
    1cfa:	8c 01       	movw	r16, r24
    1cfc:	20 91 87 01 	lds	r18, 0x0187
    1d00:	30 91 88 01 	lds	r19, 0x0188
    1d04:	80 91 83 01 	lds	r24, 0x0183
    1d08:	90 91 84 01 	lds	r25, 0x0184
    1d0c:	a9 01       	movw	r20, r18
    1d0e:	48 1b       	sub	r20, r24
    1d10:	59 0b       	sbc	r21, r25
    1d12:	ca 01       	movw	r24, r20
    1d14:	cc 01       	movw	r24, r24
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d22:	9b 01       	movw	r18, r22
    1d24:	ac 01       	movw	r20, r24
    1d26:	c8 01       	movw	r24, r16
    1d28:	b7 01       	movw	r22, r14
    1d2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	48 ec       	ldi	r20, 0xC8	; 200
    1d3c:	52 e4       	ldi	r21, 0x42	; 66
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	ab 83       	std	Y+3, r26	; 0x03
    1d58:	bc 83       	std	Y+4, r27	; 0x04
			/* display the dutyCycle on LCD screen */
			LCD_intgerToString(dutyCycle);
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_intgerToString>
			//LCD_intgerToString(TCNT1);
			LCD_displayCharacter('%');
    1d62:	85 e2       	ldi	r24, 0x25	; 37
    1d64:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <LCD_displayCharacter>
    1d68:	a4 cf       	rjmp	.-184    	; 0x1cb2 <main+0x9c>

00001d6a <__vector_9>:

/**************************************************************************
 *                              Timer0
 * ************************************************************************/
ISR(TIMER0_OVF_vect)
{
    1d6a:	1f 92       	push	r1
    1d6c:	0f 92       	push	r0
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	0f 92       	push	r0
    1d72:	11 24       	eor	r1, r1
    1d74:	2f 93       	push	r18
    1d76:	3f 93       	push	r19
    1d78:	4f 93       	push	r20
    1d7a:	5f 93       	push	r21
    1d7c:	6f 93       	push	r22
    1d7e:	7f 93       	push	r23
    1d80:	8f 93       	push	r24
    1d82:	9f 93       	push	r25
    1d84:	af 93       	push	r26
    1d86:	bf 93       	push	r27
    1d88:	ef 93       	push	r30
    1d8a:	ff 93       	push	r31
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1d94:	80 91 89 01 	lds	r24, 0x0189
    1d98:	90 91 8a 01 	lds	r25, 0x018A
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	29 f0       	breq	.+10     	; 0x1daa <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1da0:	e0 91 89 01 	lds	r30, 0x0189
    1da4:	f0 91 8a 01 	lds	r31, 0x018A
    1da8:	09 95       	icall
	}
}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	ff 91       	pop	r31
    1db0:	ef 91       	pop	r30
    1db2:	bf 91       	pop	r27
    1db4:	af 91       	pop	r26
    1db6:	9f 91       	pop	r25
    1db8:	8f 91       	pop	r24
    1dba:	7f 91       	pop	r23
    1dbc:	6f 91       	pop	r22
    1dbe:	5f 91       	pop	r21
    1dc0:	4f 91       	pop	r20
    1dc2:	3f 91       	pop	r19
    1dc4:	2f 91       	pop	r18
    1dc6:	0f 90       	pop	r0
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	0f 90       	pop	r0
    1dcc:	1f 90       	pop	r1
    1dce:	18 95       	reti

00001dd0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1dd0:	1f 92       	push	r1
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	2f 93       	push	r18
    1ddc:	3f 93       	push	r19
    1dde:	4f 93       	push	r20
    1de0:	5f 93       	push	r21
    1de2:	6f 93       	push	r22
    1de4:	7f 93       	push	r23
    1de6:	8f 93       	push	r24
    1de8:	9f 93       	push	r25
    1dea:	af 93       	push	r26
    1dec:	bf 93       	push	r27
    1dee:	ef 93       	push	r30
    1df0:	ff 93       	push	r31
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1dfa:	80 91 89 01 	lds	r24, 0x0189
    1dfe:	90 91 8a 01 	lds	r25, 0x018A
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	29 f0       	breq	.+10     	; 0x1e10 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e06:	e0 91 89 01 	lds	r30, 0x0189
    1e0a:	f0 91 8a 01 	lds	r31, 0x018A
    1e0e:	09 95       	icall
	}
}
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	ff 91       	pop	r31
    1e16:	ef 91       	pop	r30
    1e18:	bf 91       	pop	r27
    1e1a:	af 91       	pop	r26
    1e1c:	9f 91       	pop	r25
    1e1e:	8f 91       	pop	r24
    1e20:	7f 91       	pop	r23
    1e22:	6f 91       	pop	r22
    1e24:	5f 91       	pop	r21
    1e26:	4f 91       	pop	r20
    1e28:	3f 91       	pop	r19
    1e2a:	2f 91       	pop	r18
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	0f 90       	pop	r0
    1e32:	1f 90       	pop	r1
    1e34:	18 95       	reti

00001e36 <__vector_8>:

/**************************************************************************
 *                              Timer1
 * ************************************************************************/
ISR(TIMER1_OVF_vect)
{
    1e36:	1f 92       	push	r1
    1e38:	0f 92       	push	r0
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	0f 92       	push	r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	2f 93       	push	r18
    1e42:	3f 93       	push	r19
    1e44:	4f 93       	push	r20
    1e46:	5f 93       	push	r21
    1e48:	6f 93       	push	r22
    1e4a:	7f 93       	push	r23
    1e4c:	8f 93       	push	r24
    1e4e:	9f 93       	push	r25
    1e50:	af 93       	push	r26
    1e52:	bf 93       	push	r27
    1e54:	ef 93       	push	r30
    1e56:	ff 93       	push	r31
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1e60:	80 91 8b 01 	lds	r24, 0x018B
    1e64:	90 91 8c 01 	lds	r25, 0x018C
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	29 f0       	breq	.+10     	; 0x1e76 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e6c:	e0 91 8b 01 	lds	r30, 0x018B
    1e70:	f0 91 8c 01 	lds	r31, 0x018C
    1e74:	09 95       	icall
	}
}
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	ff 91       	pop	r31
    1e7c:	ef 91       	pop	r30
    1e7e:	bf 91       	pop	r27
    1e80:	af 91       	pop	r26
    1e82:	9f 91       	pop	r25
    1e84:	8f 91       	pop	r24
    1e86:	7f 91       	pop	r23
    1e88:	6f 91       	pop	r22
    1e8a:	5f 91       	pop	r21
    1e8c:	4f 91       	pop	r20
    1e8e:	3f 91       	pop	r19
    1e90:	2f 91       	pop	r18
    1e92:	0f 90       	pop	r0
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	0f 90       	pop	r0
    1e98:	1f 90       	pop	r1
    1e9a:	18 95       	reti

00001e9c <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1e9c:	1f 92       	push	r1
    1e9e:	0f 92       	push	r0
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	0f 92       	push	r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	2f 93       	push	r18
    1ea8:	3f 93       	push	r19
    1eaa:	4f 93       	push	r20
    1eac:	5f 93       	push	r21
    1eae:	6f 93       	push	r22
    1eb0:	7f 93       	push	r23
    1eb2:	8f 93       	push	r24
    1eb4:	9f 93       	push	r25
    1eb6:	af 93       	push	r26
    1eb8:	bf 93       	push	r27
    1eba:	ef 93       	push	r30
    1ebc:	ff 93       	push	r31
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    1ec6:	80 91 8b 01 	lds	r24, 0x018B
    1eca:	90 91 8c 01 	lds	r25, 0x018C
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	29 f0       	breq	.+10     	; 0x1edc <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ed2:	e0 91 8b 01 	lds	r30, 0x018B
    1ed6:	f0 91 8c 01 	lds	r31, 0x018C
    1eda:	09 95       	icall
	}
}
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	ff 91       	pop	r31
    1ee2:	ef 91       	pop	r30
    1ee4:	bf 91       	pop	r27
    1ee6:	af 91       	pop	r26
    1ee8:	9f 91       	pop	r25
    1eea:	8f 91       	pop	r24
    1eec:	7f 91       	pop	r23
    1eee:	6f 91       	pop	r22
    1ef0:	5f 91       	pop	r21
    1ef2:	4f 91       	pop	r20
    1ef4:	3f 91       	pop	r19
    1ef6:	2f 91       	pop	r18
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <__vector_4>:

/**************************************************************************
 *                              Timer2
 * ************************************************************************/
ISR(TIMER2_OVF_vect)
{
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	2f 93       	push	r18
    1f0e:	3f 93       	push	r19
    1f10:	4f 93       	push	r20
    1f12:	5f 93       	push	r21
    1f14:	6f 93       	push	r22
    1f16:	7f 93       	push	r23
    1f18:	8f 93       	push	r24
    1f1a:	9f 93       	push	r25
    1f1c:	af 93       	push	r26
    1f1e:	bf 93       	push	r27
    1f20:	ef 93       	push	r30
    1f22:	ff 93       	push	r31
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    1f2c:	80 91 89 01 	lds	r24, 0x0189
    1f30:	90 91 8a 01 	lds	r25, 0x018A
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	29 f0       	breq	.+10     	; 0x1f42 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f38:	e0 91 8d 01 	lds	r30, 0x018D
    1f3c:	f0 91 8e 01 	lds	r31, 0x018E
    1f40:	09 95       	icall
	}
}
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	ff 91       	pop	r31
    1f48:	ef 91       	pop	r30
    1f4a:	bf 91       	pop	r27
    1f4c:	af 91       	pop	r26
    1f4e:	9f 91       	pop	r25
    1f50:	8f 91       	pop	r24
    1f52:	7f 91       	pop	r23
    1f54:	6f 91       	pop	r22
    1f56:	5f 91       	pop	r21
    1f58:	4f 91       	pop	r20
    1f5a:	3f 91       	pop	r19
    1f5c:	2f 91       	pop	r18
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	0f 90       	pop	r0
    1f64:	1f 90       	pop	r1
    1f66:	18 95       	reti

00001f68 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1f68:	1f 92       	push	r1
    1f6a:	0f 92       	push	r0
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	0f 92       	push	r0
    1f70:	11 24       	eor	r1, r1
    1f72:	2f 93       	push	r18
    1f74:	3f 93       	push	r19
    1f76:	4f 93       	push	r20
    1f78:	5f 93       	push	r21
    1f7a:	6f 93       	push	r22
    1f7c:	7f 93       	push	r23
    1f7e:	8f 93       	push	r24
    1f80:	9f 93       	push	r25
    1f82:	af 93       	push	r26
    1f84:	bf 93       	push	r27
    1f86:	ef 93       	push	r30
    1f88:	ff 93       	push	r31
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    1f92:	80 91 8d 01 	lds	r24, 0x018D
    1f96:	90 91 8e 01 	lds	r25, 0x018E
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	29 f0       	breq	.+10     	; 0x1fa8 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f9e:	e0 91 8d 01 	lds	r30, 0x018D
    1fa2:	f0 91 8e 01 	lds	r31, 0x018E
    1fa6:	09 95       	icall
	}
}
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	ff 91       	pop	r31
    1fae:	ef 91       	pop	r30
    1fb0:	bf 91       	pop	r27
    1fb2:	af 91       	pop	r26
    1fb4:	9f 91       	pop	r25
    1fb6:	8f 91       	pop	r24
    1fb8:	7f 91       	pop	r23
    1fba:	6f 91       	pop	r22
    1fbc:	5f 91       	pop	r21
    1fbe:	4f 91       	pop	r20
    1fc0:	3f 91       	pop	r19
    1fc2:	2f 91       	pop	r18
    1fc4:	0f 90       	pop	r0
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	0f 90       	pop	r0
    1fca:	1f 90       	pop	r1
    1fcc:	18 95       	reti

00001fce <Timer_init>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	6a 97       	sbiw	r28, 0x1a	; 26
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->timer_ID)
    1fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fea:	80 85       	ldd	r24, Z+8	; 0x08
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	3a 8f       	std	Y+26, r19	; 0x1a
    1ff2:	29 8f       	std	Y+25, r18	; 0x19
    1ff4:	89 8d       	ldd	r24, Y+25	; 0x19
    1ff6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <Timer_init+0x32>
    1ffe:	cf c0       	rjmp	.+414    	; 0x219e <Timer_init+0x1d0>
    2000:	e9 8d       	ldd	r30, Y+25	; 0x19
    2002:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2004:	e2 30       	cpi	r30, 0x02	; 2
    2006:	f1 05       	cpc	r31, r1
    2008:	09 f4       	brne	.+2      	; 0x200c <Timer_init+0x3e>
    200a:	9c c1       	rjmp	.+824    	; 0x2344 <Timer_init+0x376>
    200c:	29 8d       	ldd	r18, Y+25	; 0x19
    200e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2010:	21 15       	cp	r18, r1
    2012:	31 05       	cpc	r19, r1
    2014:	09 f0       	breq	.+2      	; 0x2018 <Timer_init+0x4a>
    2016:	5e c2       	rjmp	.+1212   	; 0x24d4 <Timer_init+0x506>
	{

	case Timer0:

		/*Clear registers of Timer0 before accessing any of them*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    2018:	e3 e5       	ldi	r30, 0x53	; 83
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	30 81       	ld	r19, Z
    201e:	e3 e5       	ldi	r30, 0x53	; 83
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    2024:	e2 e5       	ldi	r30, 0x52	; 82
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	e2 e5       	ldi	r30, 0x52	; 82
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    2030:	ec e5       	ldi	r30, 0x5C	; 92
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	90 81       	ld	r25, Z
    2036:	ec e5       	ldi	r30, 0x5C	; 92
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    203c:	e9 e5       	ldi	r30, 0x59	; 89
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	20 81       	ld	r18, Z
    2042:	e9 e5       	ldi	r30, 0x59	; 89
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	10 82       	st	Z, r1
		 * Configure initial value for Timer0 to start count from it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */

		TIMER0_CONTROL_REGIRSTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    2048:	23 e5       	ldi	r18, 0x53	; 83
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	a2 81       	ldd	r26, Z+2	; 0x02
    2056:	b3 81       	ldd	r27, Z+3	; 0x03
    2058:	f9 01       	movw	r30, r18
    205a:	80 83       	st	Z, r24
		 * Anding with 0XF8 to make sure the first 3-bits in TCCR0 register=0
		 * ORing with the selected timer clock to include it in the first 3-bits
		 * and keep the other bits as they are
		 */

		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLEAR_CLOCK_BITS_VALUE) | (Config_Ptr->timer_clock);
    205c:	a3 e5       	ldi	r26, 0x53	; 83
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e3 e5       	ldi	r30, 0x53	; 83
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	98 2f       	mov	r25, r24
    2068:	98 7f       	andi	r25, 0xF8	; 248
    206a:	e9 81       	ldd	r30, Y+1	; 0x01
    206c:	fa 81       	ldd	r31, Y+2	; 0x02
    206e:	81 85       	ldd	r24, Z+9	; 0x09
    2070:	89 2b       	or	r24, r25
    2072:	8c 93       	st	X, r24
		 * Configure compare output mode to work with normal port operation
		 * OC0 disconnected
		 * Clear COM00 bit in TCCR0 register
		 * Clear COM01 bit in TCCR0 register
		 */
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_COMPARE_OUTPUT_MODE_BIT0);
    2074:	23 e5       	ldi	r18, 0x53	; 83
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	a3 e5       	ldi	r26, 0x53	; 83
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e3 e5       	ldi	r30, 0x53	; 83
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	8f 7e       	andi	r24, 0xEF	; 239
    2084:	8c 93       	st	X, r24
    2086:	8c 91       	ld	r24, X
    2088:	f9 01       	movw	r30, r18
    208a:	80 83       	st	Z, r24
		TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_COMPARE_OUTPUT_MODE_BIT1);
    208c:	23 e5       	ldi	r18, 0x53	; 83
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	a3 e5       	ldi	r26, 0x53	; 83
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e3 e5       	ldi	r30, 0x53	; 83
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	8f 7d       	andi	r24, 0xDF	; 223
    209c:	8c 93       	st	X, r24
    209e:	8c 91       	ld	r24, X
    20a0:	f9 01       	movw	r30, r18
    20a2:	80 83       	st	Z, r24

		switch(Config_Ptr->timer_mode)
    20a4:	e9 81       	ldd	r30, Y+1	; 0x01
    20a6:	fa 81       	ldd	r31, Y+2	; 0x02
    20a8:	82 85       	ldd	r24, Z+10	; 0x0a
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	3c 8b       	std	Y+20, r19	; 0x14
    20b0:	2b 8b       	std	Y+19, r18	; 0x13
    20b2:	8b 89       	ldd	r24, Y+19	; 0x13
    20b4:	9c 89       	ldd	r25, Y+20	; 0x14
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	31 f0       	breq	.+12     	; 0x20c6 <Timer_init+0xf8>
    20ba:	eb 89       	ldd	r30, Y+19	; 0x13
    20bc:	fc 89       	ldd	r31, Y+20	; 0x14
    20be:	e1 30       	cpi	r30, 0x01	; 1
    20c0:	f1 05       	cpc	r31, r1
    20c2:	91 f1       	breq	.+100    	; 0x2128 <Timer_init+0x15a>
    20c4:	07 c2       	rjmp	.+1038   	; 0x24d4 <Timer_init+0x506>
			/*
			 * Configure wave form generation mode to work with normal mode
			 * Clear WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    20c6:	23 e5       	ldi	r18, 0x53	; 83
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	a3 e5       	ldi	r26, 0x53	; 83
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e3 e5       	ldi	r30, 0x53	; 83
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	8f 7b       	andi	r24, 0xBF	; 191
    20d6:	8c 93       	st	X, r24
    20d8:	8c 91       	ld	r24, X
    20da:	f9 01       	movw	r30, r18
    20dc:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    20de:	23 e5       	ldi	r18, 0x53	; 83
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	a3 e5       	ldi	r26, 0x53	; 83
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e3 e5       	ldi	r30, 0x53	; 83
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	87 7f       	andi	r24, 0xF7	; 247
    20ee:	8c 93       	st	X, r24
    20f0:	8c 91       	ld	r24, X
    20f2:	f9 01       	movw	r30, r18
    20f4:	80 83       	st	Z, r24
			/*
			 * Configure FOC0 bit in the TCCR0 register to be active
			 * As Timer0 is non-PWM
			 * Make FOC0 to be Active as it is overflow mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER,TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    20f6:	23 e5       	ldi	r18, 0x53	; 83
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	a3 e5       	ldi	r26, 0x53	; 83
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e5       	ldi	r30, 0x53	; 83
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 68       	ori	r24, 0x80	; 128
    2106:	8c 93       	st	X, r24
    2108:	8c 91       	ld	r24, X
    210a:	f9 01       	movw	r30, r18
    210c:	80 83       	st	Z, r24
			 * Enable Timer0 overflow interrupt
			 * wait for: -Enable I-bit "mask bit" in the SREG register
			 *           -TOV0 bit in the TIFR register to be set
			 * Timer0 overflow mode is ready to work after that
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_OVERFLOW_INTERRUPT);
    210e:	29 e5       	ldi	r18, 0x59	; 89
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	a9 e5       	ldi	r26, 0x59	; 89
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e9 e5       	ldi	r30, 0x59	; 89
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	81 60       	ori	r24, 0x01	; 1
    211e:	8c 93       	st	X, r24
    2120:	8c 91       	ld	r24, X
    2122:	f9 01       	movw	r30, r18
    2124:	80 83       	st	Z, r24
    2126:	d6 c1       	rjmp	.+940    	; 0x24d4 <Timer_init+0x506>
			/*
			 * Configure wave form generation mode to work with normal mode
			 * Clear WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    2128:	23 e5       	ldi	r18, 0x53	; 83
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	a3 e5       	ldi	r26, 0x53	; 83
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e3 e5       	ldi	r30, 0x53	; 83
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	8f 7b       	andi	r24, 0xBF	; 191
    2138:	8c 93       	st	X, r24
    213a:	8c 91       	ld	r24, X
    213c:	f9 01       	movw	r30, r18
    213e:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    2140:	23 e5       	ldi	r18, 0x53	; 83
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	a3 e5       	ldi	r26, 0x53	; 83
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e3 e5       	ldi	r30, 0x53	; 83
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	88 60       	ori	r24, 0x08	; 8
    2150:	8c 93       	st	X, r24
    2152:	8c 91       	ld	r24, X
    2154:	f9 01       	movw	r30, r18
    2156:	80 83       	st	Z, r24
			/*
			 * Configure FOC0 bit in the TCCR0 register to be active
			 * As Timer0 is non-PWM
			 * Make FOC0 to be Active as it is compare mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    2158:	23 e5       	ldi	r18, 0x53	; 83
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	a3 e5       	ldi	r26, 0x53	; 83
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e3 e5       	ldi	r30, 0x53	; 83
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	80 68       	ori	r24, 0x80	; 128
    2168:	8c 93       	st	X, r24
    216a:	8c 91       	ld	r24, X
    216c:	f9 01       	movw	r30, r18
    216e:	80 83       	st	Z, r24
			/*
			 * Configure Compare match value for Timer0 to start count from it
			 * Anding with 0XFF to make sure the value won't exceed
			 * 255 as it is 8-bit Timer
			 */
			TIMER0_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    2170:	2c e5       	ldi	r18, 0x5C	; 92
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	e9 81       	ldd	r30, Y+1	; 0x01
    2176:	fa 81       	ldd	r31, Y+2	; 0x02
    2178:	84 81       	ldd	r24, Z+4	; 0x04
    217a:	95 81       	ldd	r25, Z+5	; 0x05
    217c:	a6 81       	ldd	r26, Z+6	; 0x06
    217e:	b7 81       	ldd	r27, Z+7	; 0x07
    2180:	f9 01       	movw	r30, r18
    2182:	80 83       	st	Z, r24
			 * Enable Timer0 compare match interrupt
			 * wait for: -Enable I-bit "mask bit" in the SREG register
			 *           -OCF0 bit in the TIFR register to be set
			 * Timer0 compare match mode is ready to work after that
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT);
    2184:	29 e5       	ldi	r18, 0x59	; 89
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	a9 e5       	ldi	r26, 0x59	; 89
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e9 e5       	ldi	r30, 0x59	; 89
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	82 60       	ori	r24, 0x02	; 2
    2194:	8c 93       	st	X, r24
    2196:	8c 91       	ld	r24, X
    2198:	f9 01       	movw	r30, r18
    219a:	80 83       	st	Z, r24
    219c:	9b c1       	rjmp	.+822    	; 0x24d4 <Timer_init+0x506>


		case Timer1:

			/*Clear registers of Timer1 before accessing any of them*/
			TIMER1_CONTROL_REGIRSTER_A        &= 0X00;
    219e:	ef e4       	ldi	r30, 0x4F	; 79
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	20 81       	ld	r18, Z
    21a4:	ef e4       	ldi	r30, 0x4F	; 79
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	10 82       	st	Z, r1
			TIMER1_CONTROL_REGIRSTER_B        &= 0X00;
    21aa:	ee e4       	ldi	r30, 0x4E	; 78
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	30 81       	ld	r19, Z
    21b0:	ee e4       	ldi	r30, 0x4E	; 78
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	10 82       	st	Z, r1
			TIMER1_INITIAL_VALUE_REGISTER     &= 0X00;
    21b6:	ec e4       	ldi	r30, 0x4C	; 76
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	91 81       	ldd	r25, Z+1	; 0x01
    21be:	ec e4       	ldi	r30, 0x4C	; 76
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	11 82       	std	Z+1, r1	; 0x01
    21c4:	10 82       	st	Z, r1
			TIMER1_OUTPUT_COMPARE_REGISTER_A  &= 0X00;
    21c6:	ea e4       	ldi	r30, 0x4A	; 74
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	20 81       	ld	r18, Z
    21cc:	31 81       	ldd	r19, Z+1	; 0x01
    21ce:	ea e4       	ldi	r30, 0x4A	; 74
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	11 82       	std	Z+1, r1	; 0x01
    21d4:	10 82       	st	Z, r1
			TIMER1_INTERRUPT_MASK_REGISTER    &= 0X00;
    21d6:	e9 e5       	ldi	r30, 0x59	; 89
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	30 81       	ld	r19, Z
    21dc:	e9 e5       	ldi	r30, 0x59	; 89
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	10 82       	st	Z, r1
			 * Configure initial value for Timer1 to start count from it
			 * Anding with 0XFF to make sure the value won't exceed
			 *  0XFFFF as it is 16-bit Timer
			 */

			TIMER1_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFFFF;
    21e2:	2c e4       	ldi	r18, 0x4C	; 76
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	e9 81       	ldd	r30, Y+1	; 0x01
    21e8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ea:	80 81       	ld	r24, Z
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
    21ee:	a2 81       	ldd	r26, Z+2	; 0x02
    21f0:	b3 81       	ldd	r27, Z+3	; 0x03
    21f2:	f9 01       	movw	r30, r18
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
			 * Anding with 0XF8 to make sure the first 3-bits in TCCR1B register=0
			 * ORing with the selected timer clock to include it in the first 3-bits
			 * and keep the other bits as they are
			 */

			TIMER1_CONTROL_REGIRSTER_B =  (TIMER1_CONTROL_REGIRSTER_B & 0XF8) | (Config_Ptr->timer_clock);
    21f8:	ae e4       	ldi	r26, 0x4E	; 78
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	ee e4       	ldi	r30, 0x4E	; 78
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	98 2f       	mov	r25, r24
    2204:	98 7f       	andi	r25, 0xF8	; 248
    2206:	e9 81       	ldd	r30, Y+1	; 0x01
    2208:	fa 81       	ldd	r31, Y+2	; 0x02
    220a:	81 85       	ldd	r24, Z+9	; 0x09
    220c:	89 2b       	or	r24, r25
    220e:	8c 93       	st	X, r24
			 * Configure compare output mode to work with normal port operation
			 * OC1A/OC1B disconnected
			 * Clear COM1A0/COM1A1 bits in TCCR1A register
			 * Clear COM1B0/COM1B1 bits in TCCR1A register
			 */
			TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0X0F;
    2210:	af e4       	ldi	r26, 0x4F	; 79
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ef e4       	ldi	r30, 0x4F	; 79
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	8f 70       	andi	r24, 0x0F	; 15
    221c:	8c 93       	st	X, r24


			switch(Config_Ptr->timer_mode)
    221e:	e9 81       	ldd	r30, Y+1	; 0x01
    2220:	fa 81       	ldd	r31, Y+2	; 0x02
    2222:	82 85       	ldd	r24, Z+10	; 0x0a
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	3b 87       	std	Y+11, r19	; 0x0b
    222a:	2a 87       	std	Y+10, r18	; 0x0a
    222c:	8a 85       	ldd	r24, Y+10	; 0x0a
    222e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	31 f0       	breq	.+12     	; 0x2240 <Timer_init+0x272>
    2234:	ea 85       	ldd	r30, Y+10	; 0x0a
    2236:	fb 85       	ldd	r31, Y+11	; 0x0b
    2238:	e1 30       	cpi	r30, 0x01	; 1
    223a:	f1 05       	cpc	r31, r1
    223c:	a1 f1       	breq	.+104    	; 0x22a6 <Timer_init+0x2d8>
    223e:	4a c1       	rjmp	.+660    	; 0x24d4 <Timer_init+0x506>
				/*
				 * Configure wave form generation mode to work with normal mode
				 * Clear WGM10/WMG11 bit in TCCR1A register
				 * Clear WGM12/WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0XFC ;
    2240:	af e4       	ldi	r26, 0x4F	; 79
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	ef e4       	ldi	r30, 0x4F	; 79
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	8c 7f       	andi	r24, 0xFC	; 252
    224c:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGIRSTER_B = TIMER1_CONTROL_REGIRSTER_B & 0XE7 ;
    224e:	ae e4       	ldi	r26, 0x4E	; 78
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ee e4       	ldi	r30, 0x4E	; 78
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	87 7e       	andi	r24, 0xE7	; 231
    225a:	8c 93       	st	X, r24
				/*
				 * Configure FOC1A/FOC1B bit in the TCCR1 register to be active
				 * As Timer1 is non-PWM
				 * Make FOC1A/FOC1B to be Active as it is overflow mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    225c:	2f e4       	ldi	r18, 0x4F	; 79
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	af e4       	ldi	r26, 0x4F	; 79
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	ef e4       	ldi	r30, 0x4F	; 79
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	88 60       	ori	r24, 0x08	; 8
    226c:	8c 93       	st	X, r24
    226e:	8c 91       	ld	r24, X
    2270:	f9 01       	movw	r30, r18
    2272:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    2274:	2f e4       	ldi	r18, 0x4F	; 79
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	af e4       	ldi	r26, 0x4F	; 79
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ef e4       	ldi	r30, 0x4F	; 79
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	84 60       	ori	r24, 0x04	; 4
    2284:	8c 93       	st	X, r24
    2286:	8c 91       	ld	r24, X
    2288:	f9 01       	movw	r30, r18
    228a:	80 83       	st	Z, r24
				 * Enable Timer1 overflow interrupt
				 * wait for: -Enable I-bit "mask bit" in the SREG register
				 *           -TOV1 bit in the TIFR register to be set
				 * Timer1 overflow mode is ready to work after that
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_OVERFLOW_INTERRUPT);
    228c:	29 e5       	ldi	r18, 0x59	; 89
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	a9 e5       	ldi	r26, 0x59	; 89
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e9 e5       	ldi	r30, 0x59	; 89
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	84 60       	ori	r24, 0x04	; 4
    229c:	8c 93       	st	X, r24
    229e:	8c 91       	ld	r24, X
    22a0:	f9 01       	movw	r30, r18
    22a2:	80 83       	st	Z, r24
    22a4:	17 c1       	rjmp	.+558    	; 0x24d4 <Timer_init+0x506>
				 * Configure wave form generation mode to work with normal mode
				 * Clear WGM10/WGM11 bits in TCCR1A register
				 * Set WGM12 bit in TCCR1B register
				 * Clear WGM13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_A = TIMER1_CONTROL_REGIRSTER_A & 0XFC ;
    22a6:	af e4       	ldi	r26, 0x4F	; 79
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	ef e4       	ldi	r30, 0x4F	; 79
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8c 7f       	andi	r24, 0xFC	; 252
    22b2:	8c 93       	st	X, r24
				TIMER1_CONTROL_REGIRSTER_B = SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    22b4:	2e e4       	ldi	r18, 0x4E	; 78
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	ae e4       	ldi	r26, 0x4E	; 78
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	ee e4       	ldi	r30, 0x4E	; 78
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	88 60       	ori	r24, 0x08	; 8
    22c4:	8c 93       	st	X, r24
    22c6:	8c 91       	ld	r24, X
    22c8:	f9 01       	movw	r30, r18
    22ca:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_B = CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    22cc:	2e e4       	ldi	r18, 0x4E	; 78
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	ae e4       	ldi	r26, 0x4E	; 78
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	ee e4       	ldi	r30, 0x4E	; 78
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8f 7e       	andi	r24, 0xEF	; 239
    22dc:	8c 93       	st	X, r24
    22de:	8c 91       	ld	r24, X
    22e0:	f9 01       	movw	r30, r18
    22e2:	80 83       	st	Z, r24
				/*
				 * Configure FOC1A/FOC1B bit in the TCCR1 register to be active
				 * As Timer1 is non-PWM
				 * Make FOC1A/FOC1B to be Active as it is compare mode
				 */
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    22e4:	2f e4       	ldi	r18, 0x4F	; 79
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	af e4       	ldi	r26, 0x4F	; 79
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	ef e4       	ldi	r30, 0x4F	; 79
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	88 60       	ori	r24, 0x08	; 8
    22f4:	8c 93       	st	X, r24
    22f6:	8c 91       	ld	r24, X
    22f8:	f9 01       	movw	r30, r18
    22fa:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    22fc:	2f e4       	ldi	r18, 0x4F	; 79
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	af e4       	ldi	r26, 0x4F	; 79
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	ef e4       	ldi	r30, 0x4F	; 79
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	84 60       	ori	r24, 0x04	; 4
    230c:	8c 93       	st	X, r24
    230e:	8c 91       	ld	r24, X
    2310:	f9 01       	movw	r30, r18
    2312:	80 83       	st	Z, r24
				/*
				 * Configure Compare match value for Timer1 to start count from it
				 * Anding with 0XFFFF to make sure the value won't exceed
				 * OXFFFF as it is 16-bit Timer
				 */
				TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    2314:	2a e4       	ldi	r18, 0x4A	; 74
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	e9 81       	ldd	r30, Y+1	; 0x01
    231a:	fa 81       	ldd	r31, Y+2	; 0x02
    231c:	84 81       	ldd	r24, Z+4	; 0x04
    231e:	95 81       	ldd	r25, Z+5	; 0x05
    2320:	a6 81       	ldd	r26, Z+6	; 0x06
    2322:	b7 81       	ldd	r27, Z+7	; 0x07
    2324:	f9 01       	movw	r30, r18
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
				 * Enable Timer1 compare match interrupt
				 * wait for: -Enable I-bit "mask bit" in the SREG register
				 *           -OCF1 bit in the TIFR register to be set
				 * Timer1 compare match mode is ready to work after that
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT);
    232a:	29 e5       	ldi	r18, 0x59	; 89
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	a9 e5       	ldi	r26, 0x59	; 89
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e9 e5       	ldi	r30, 0x59	; 89
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	80 61       	ori	r24, 0x10	; 16
    233a:	8c 93       	st	X, r24
    233c:	8c 91       	ld	r24, X
    233e:	f9 01       	movw	r30, r18
    2340:	80 83       	st	Z, r24
    2342:	c8 c0       	rjmp	.+400    	; 0x24d4 <Timer_init+0x506>


			case Timer2:

				/*Clear registers of Timer0 before accessing any of them*/
				TIMER2_CONTROL_REGIRSTER        &= 0X00;
    2344:	e5 e4       	ldi	r30, 0x45	; 69
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	20 81       	ld	r18, Z
    234a:	e5 e4       	ldi	r30, 0x45	; 69
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	10 82       	st	Z, r1
				TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    2350:	e4 e4       	ldi	r30, 0x44	; 68
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	30 81       	ld	r19, Z
    2356:	e4 e4       	ldi	r30, 0x44	; 68
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	10 82       	st	Z, r1
				TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    235c:	e3 e4       	ldi	r30, 0x43	; 67
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	e3 e4       	ldi	r30, 0x43	; 67
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	10 82       	st	Z, r1
				TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    2368:	e9 e5       	ldi	r30, 0x59	; 89
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	90 81       	ld	r25, Z
    236e:	e9 e5       	ldi	r30, 0x59	; 89
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	10 82       	st	Z, r1
				/*************************************************************************/
				ASSR  &= 0X00;
    2374:	e2 e4       	ldi	r30, 0x42	; 66
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	20 81       	ld	r18, Z
    237a:	e2 e4       	ldi	r30, 0x42	; 66
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	10 82       	st	Z, r1
				 * Configure initial value for Timer2 to start count from it
				 * Anding with 0XFF to make sure the value won't exceed
				 * 255 as it is 8-bit Timer
				 */

				TIMER2_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    2380:	24 e4       	ldi	r18, 0x44	; 68
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	e9 81       	ldd	r30, Y+1	; 0x01
    2386:	fa 81       	ldd	r31, Y+2	; 0x02
    2388:	80 81       	ld	r24, Z
    238a:	91 81       	ldd	r25, Z+1	; 0x01
    238c:	a2 81       	ldd	r26, Z+2	; 0x02
    238e:	b3 81       	ldd	r27, Z+3	; 0x03
    2390:	f9 01       	movw	r30, r18
    2392:	80 83       	st	Z, r24
				 * Anding with 0XF8 to make sure the first 3-bits in TCCR2 register=0
				 * ORing with the selected timer clock to include it in the first 3-bits
				 * and keep the other bits as they are
				 */

				TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLEAR_CLOCK_BITS_VALUE) | (Config_Ptr->timer_clock);
    2394:	a5 e4       	ldi	r26, 0x45	; 69
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e5 e4       	ldi	r30, 0x45	; 69
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	98 2f       	mov	r25, r24
    23a0:	98 7f       	andi	r25, 0xF8	; 248
    23a2:	e9 81       	ldd	r30, Y+1	; 0x01
    23a4:	fa 81       	ldd	r31, Y+2	; 0x02
    23a6:	81 85       	ldd	r24, Z+9	; 0x09
    23a8:	89 2b       	or	r24, r25
    23aa:	8c 93       	st	X, r24
				 * Configure compare output mode to work with normal port operation
				 * OC2 disconnected
				 * Clear COM20 bit in TCCR2 register
				 * Clear COM21 bit in TCCR2 register
				 */
				TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_COMPARE_OUTPUT_MODE_BIT0);
    23ac:	25 e4       	ldi	r18, 0x45	; 69
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	a5 e4       	ldi	r26, 0x45	; 69
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e5 e4       	ldi	r30, 0x45	; 69
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 7e       	andi	r24, 0xEF	; 239
    23bc:	8c 93       	st	X, r24
    23be:	8c 91       	ld	r24, X
    23c0:	f9 01       	movw	r30, r18
    23c2:	80 83       	st	Z, r24
				TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_COMPARE_OUTPUT_MODE_BIT1);
    23c4:	25 e4       	ldi	r18, 0x45	; 69
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	a5 e4       	ldi	r26, 0x45	; 69
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e5 e4       	ldi	r30, 0x45	; 69
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 7d       	andi	r24, 0xDF	; 223
    23d4:	8c 93       	st	X, r24
    23d6:	8c 91       	ld	r24, X
    23d8:	f9 01       	movw	r30, r18
    23da:	80 83       	st	Z, r24

				switch(Config_Ptr->timer_mode)
    23dc:	e9 81       	ldd	r30, Y+1	; 0x01
    23de:	fa 81       	ldd	r31, Y+2	; 0x02
    23e0:	82 85       	ldd	r24, Z+10	; 0x0a
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	3c 83       	std	Y+4, r19	; 0x04
    23e8:	2b 83       	std	Y+3, r18	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	31 f0       	breq	.+12     	; 0x23fe <Timer_init+0x430>
    23f2:	eb 81       	ldd	r30, Y+3	; 0x03
    23f4:	fc 81       	ldd	r31, Y+4	; 0x04
    23f6:	e1 30       	cpi	r30, 0x01	; 1
    23f8:	f1 05       	cpc	r31, r1
    23fa:	91 f1       	breq	.+100    	; 0x2460 <Timer_init+0x492>
    23fc:	6b c0       	rjmp	.+214    	; 0x24d4 <Timer_init+0x506>
					/*
					 * Configure wave form generation mode to work with normal mode
					 * Clear WGM00 bit in TCCR0 register
					 * Clear WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    23fe:	25 e4       	ldi	r18, 0x45	; 69
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	a5 e4       	ldi	r26, 0x45	; 69
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e5 e4       	ldi	r30, 0x45	; 69
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	8f 7b       	andi	r24, 0xBF	; 191
    240e:	8c 93       	st	X, r24
    2410:	8c 91       	ld	r24, X
    2412:	f9 01       	movw	r30, r18
    2414:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    2416:	25 e4       	ldi	r18, 0x45	; 69
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	a5 e4       	ldi	r26, 0x45	; 69
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e5 e4       	ldi	r30, 0x45	; 69
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	87 7f       	andi	r24, 0xF7	; 247
    2426:	8c 93       	st	X, r24
    2428:	8c 91       	ld	r24, X
    242a:	f9 01       	movw	r30, r18
    242c:	80 83       	st	Z, r24
					/*
					 * Configure FOC2 bit in the TCCR2 register to be active
					 * As Timer2 is non-PWM
					 * Make FOC2 to be Active as it is overflow mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER ,TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    242e:	25 e4       	ldi	r18, 0x45	; 69
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	a5 e4       	ldi	r26, 0x45	; 69
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e5 e4       	ldi	r30, 0x45	; 69
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	80 68       	ori	r24, 0x80	; 128
    243e:	8c 93       	st	X, r24
    2440:	8c 91       	ld	r24, X
    2442:	f9 01       	movw	r30, r18
    2444:	80 83       	st	Z, r24
					 * Enable Timer0 overflow interrupt
					 * wait for: -Enable I-bit "mask bit" in the SREG register
					 *           -TOV0 bit in the TIFR register to be set
					 * Timer0 overflow mode is ready to work after that
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER,TIMER2_OUTPUT_OVERFLOW_INTERRUPT);
    2446:	29 e5       	ldi	r18, 0x59	; 89
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	a9 e5       	ldi	r26, 0x59	; 89
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	e9 e5       	ldi	r30, 0x59	; 89
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	80 64       	ori	r24, 0x40	; 64
    2456:	8c 93       	st	X, r24
    2458:	8c 91       	ld	r24, X
    245a:	f9 01       	movw	r30, r18
    245c:	80 83       	st	Z, r24
    245e:	3a c0       	rjmp	.+116    	; 0x24d4 <Timer_init+0x506>
					/*
					 * Configure wave form generation mode to work with normal mode
					 * Clear WGM20 bit in TCCR2 register
					 * Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    2460:	25 e4       	ldi	r18, 0x45	; 69
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	a5 e4       	ldi	r26, 0x45	; 69
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e5 e4       	ldi	r30, 0x45	; 69
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	8f 7b       	andi	r24, 0xBF	; 191
    2470:	8c 93       	st	X, r24
    2472:	8c 91       	ld	r24, X
    2474:	f9 01       	movw	r30, r18
    2476:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    2478:	25 e4       	ldi	r18, 0x45	; 69
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	a5 e4       	ldi	r26, 0x45	; 69
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e5 e4       	ldi	r30, 0x45	; 69
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	88 60       	ori	r24, 0x08	; 8
    2488:	8c 93       	st	X, r24
    248a:	8c 91       	ld	r24, X
    248c:	f9 01       	movw	r30, r18
    248e:	80 83       	st	Z, r24
					/*
					 * Configure FOC2 bit in the TCCR2 register to be active
					 * As Timer2 is non-PWM
					 * Make FOC2 to be Active as it is compare mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    2490:	25 e4       	ldi	r18, 0x45	; 69
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	a5 e4       	ldi	r26, 0x45	; 69
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e5 e4       	ldi	r30, 0x45	; 69
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	80 68       	ori	r24, 0x80	; 128
    24a0:	8c 93       	st	X, r24
    24a2:	8c 91       	ld	r24, X
    24a4:	f9 01       	movw	r30, r18
    24a6:	80 83       	st	Z, r24
					/*
					 * Configure Compare match value for Timer2 to start count from it
					 * Anding with 0XFF to make sure the value won't exceed
					 * 255 as it is 8-bit Timer
					 */
					TIMER2_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    24a8:	23 e4       	ldi	r18, 0x43	; 67
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	e9 81       	ldd	r30, Y+1	; 0x01
    24ae:	fa 81       	ldd	r31, Y+2	; 0x02
    24b0:	84 81       	ldd	r24, Z+4	; 0x04
    24b2:	95 81       	ldd	r25, Z+5	; 0x05
    24b4:	a6 81       	ldd	r26, Z+6	; 0x06
    24b6:	b7 81       	ldd	r27, Z+7	; 0x07
    24b8:	f9 01       	movw	r30, r18
    24ba:	80 83       	st	Z, r24
					 * Enable Timer2 compare match interrupt
					 * wait for: -Enable I-bit "mask bit" in the SREG register
					 *           -OCF2 bit in the TIFR register to be set
					 * Timer2 compare match mode is ready to work after that
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    24bc:	29 e5       	ldi	r18, 0x59	; 89
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	a9 e5       	ldi	r26, 0x59	; 89
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e9 e5       	ldi	r30, 0x59	; 89
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 68       	ori	r24, 0x80	; 128
    24cc:	8c 93       	st	X, r24
    24ce:	8c 91       	ld	r24, X
    24d0:	f9 01       	movw	r30, r18
    24d2:	80 83       	st	Z, r24

				break; /*End of Timer2*/

	}/*End of Super switch case*/

}/*End of the Timer_init*/
    24d4:	6a 96       	adiw	r28, 0x1a	; 26
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <Timer_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), Timer_Type timer_type )
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <Timer_setCallBack+0x6>
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <Timer_setCallBack+0x8>
    24ee:	0f 92       	push	r0
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	6b 83       	std	Y+3, r22	; 0x03

	switch(timer_type)
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	3d 83       	std	Y+5, r19	; 0x05
    2502:	2c 83       	std	Y+4, r18	; 0x04
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	9d 81       	ldd	r25, Y+5	; 0x05
    2508:	81 30       	cpi	r24, 0x01	; 1
    250a:	91 05       	cpc	r25, r1
    250c:	81 f0       	breq	.+32     	; 0x252e <Timer_setCallBack+0x48>
    250e:	2c 81       	ldd	r18, Y+4	; 0x04
    2510:	3d 81       	ldd	r19, Y+5	; 0x05
    2512:	22 30       	cpi	r18, 0x02	; 2
    2514:	31 05       	cpc	r19, r1
    2516:	91 f0       	breq	.+36     	; 0x253c <Timer_setCallBack+0x56>
    2518:	8c 81       	ldd	r24, Y+4	; 0x04
    251a:	9d 81       	ldd	r25, Y+5	; 0x05
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	a1 f4       	brne	.+40     	; 0x2548 <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global variable */
		g_Timer0_callBackPtr = a_ptr;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	90 93 8a 01 	sts	0x018A, r25
    2528:	80 93 89 01 	sts	0x0189, r24
    252c:	0d c0       	rjmp	.+26     	; 0x2548 <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global variable */
		g_Timer1_callBackPtr = a_ptr;
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	90 93 8c 01 	sts	0x018C, r25
    2536:	80 93 8b 01 	sts	0x018B, r24
    253a:	06 c0       	rjmp	.+12     	; 0x2548 <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global variable */
		g_Timer2_callBackPtr = a_ptr;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	90 93 8e 01 	sts	0x018E, r25
    2544:	80 93 8d 01 	sts	0x018D, r24
		break;
	} /*End of the switch case*/

}/*End of the setCallBack function*/
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <Timer_stop>:
 * [Returns]:      NONE
 ***************************************************************************************************/


void Timer_stop(Timer_Type timer_type)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <Timer_stop+0x6>
    255e:	0f 92       	push	r0
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	89 83       	std	Y+1, r24	; 0x01

	switch(timer_type)
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3b 83       	std	Y+3, r19	; 0x03
    256e:	2a 83       	std	Y+2, r18	; 0x02
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	91 05       	cpc	r25, r1
    2578:	89 f0       	breq	.+34     	; 0x259c <Timer_stop+0x44>
    257a:	2a 81       	ldd	r18, Y+2	; 0x02
    257c:	3b 81       	ldd	r19, Y+3	; 0x03
    257e:	22 30       	cpi	r18, 0x02	; 2
    2580:	31 05       	cpc	r19, r1
    2582:	a1 f0       	breq	.+40     	; 0x25ac <Timer_stop+0x54>
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	b9 f4       	brne	.+46     	; 0x25ba <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR0 register
		 * stop the clock of the timer
		 * timer0 will stop incrementing
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLEAR_CLOCK_BITS_VALUE) ;
    258c:	a3 e5       	ldi	r26, 0x53	; 83
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e3 e5       	ldi	r30, 0x53	; 83
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	88 7f       	andi	r24, 0xF8	; 248
    2598:	8c 93       	st	X, r24
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR1B register
		 * stop the clock of the timer
		 * timer1 will stop incrementing
		 */
		TIMER1_CONTROL_REGIRSTER_B  =  (TIMER1_CONTROL_REGIRSTER_B  & 0XF8) ;
    259c:	ae e4       	ldi	r26, 0x4E	; 78
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	ee e4       	ldi	r30, 0x4E	; 78
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	88 7f       	andi	r24, 0xF8	; 248
    25a8:	8c 93       	st	X, r24
    25aa:	07 c0       	rjmp	.+14     	; 0x25ba <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR2 register
		 * stop the clock of the timer
		 * timer2 will stop incrementing
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLEAR_CLOCK_BITS_VALUE) ;
    25ac:	a5 e4       	ldi	r26, 0x45	; 69
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e5 e4       	ldi	r30, 0x45	; 69
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	88 7f       	andi	r24, 0xF8	; 248
    25b8:	8c 93       	st	X, r24
		break;

	} /*End of the switch case*/


}/*End of the Timer_stop function*/
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <Timer_DeInit>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void Timer_DeInit(Timer_Type timer_type)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	62 97       	sbiw	r28, 0x12	; 18
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	3a 8b       	std	Y+18, r19	; 0x12
    25e4:	29 8b       	std	Y+17, r18	; 0x11
    25e6:	89 89       	ldd	r24, Y+17	; 0x11
    25e8:	9a 89       	ldd	r25, Y+18	; 0x12
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	91 05       	cpc	r25, r1
    25ee:	21 f1       	breq	.+72     	; 0x2638 <Timer_DeInit+0x72>
    25f0:	29 89       	ldd	r18, Y+17	; 0x11
    25f2:	3a 89       	ldd	r19, Y+18	; 0x12
    25f4:	22 30       	cpi	r18, 0x02	; 2
    25f6:	31 05       	cpc	r19, r1
    25f8:	09 f4       	brne	.+2      	; 0x25fc <Timer_DeInit+0x36>
    25fa:	41 c0       	rjmp	.+130    	; 0x267e <Timer_DeInit+0xb8>
    25fc:	89 89       	ldd	r24, Y+17	; 0x11
    25fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	09 f0       	breq	.+2      	; 0x2606 <Timer_DeInit+0x40>
    2604:	54 c0       	rjmp	.+168    	; 0x26ae <Timer_DeInit+0xe8>
	{
	case Timer0:

		/*Clear all register in Timer0*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    2606:	e3 e5       	ldi	r30, 0x53	; 83
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	90 81       	ld	r25, Z
    260c:	e3 e5       	ldi	r30, 0x53	; 83
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    2612:	e2 e5       	ldi	r30, 0x52	; 82
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	20 81       	ld	r18, Z
    2618:	e2 e5       	ldi	r30, 0x52	; 82
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    261e:	ec e5       	ldi	r30, 0x5C	; 92
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	30 81       	ld	r19, Z
    2624:	ec e5       	ldi	r30, 0x5C	; 92
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    262a:	e9 e5       	ldi	r30, 0x59	; 89
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	e9 e5       	ldi	r30, 0x59	; 89
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	10 82       	st	Z, r1
    2636:	3b c0       	rjmp	.+118    	; 0x26ae <Timer_DeInit+0xe8>
		break;

	case Timer1:

		/*Clear all register in Timer1*/
		TIMER1_CONTROL_REGIRSTER_A         &= 0X00;
    2638:	ef e4       	ldi	r30, 0x4F	; 79
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	90 81       	ld	r25, Z
    263e:	ef e4       	ldi	r30, 0x4F	; 79
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	10 82       	st	Z, r1
		TIMER1_CONTROL_REGIRSTER_B         &= 0X00;
    2644:	ee e4       	ldi	r30, 0x4E	; 78
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	20 81       	ld	r18, Z
    264a:	ee e4       	ldi	r30, 0x4E	; 78
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	10 82       	st	Z, r1
		TIMER1_INITIAL_VALUE_REGISTER      &= 0X00;
    2650:	ec e4       	ldi	r30, 0x4C	; 76
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	ec e4       	ldi	r30, 0x4C	; 76
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	11 82       	std	Z+1, r1	; 0x01
    265e:	10 82       	st	Z, r1
		TIMER1_OUTPUT_COMPARE_REGISTER_A   &= 0X00;
    2660:	ea e4       	ldi	r30, 0x4A	; 74
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	20 81       	ld	r18, Z
    2666:	31 81       	ldd	r19, Z+1	; 0x01
    2668:	ea e4       	ldi	r30, 0x4A	; 74
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	11 82       	std	Z+1, r1	; 0x01
    266e:	10 82       	st	Z, r1
		TIMER1_INTERRUPT_MASK_REGISTER     &= 0X00;
    2670:	e9 e5       	ldi	r30, 0x59	; 89
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	30 81       	ld	r19, Z
    2676:	e9 e5       	ldi	r30, 0x59	; 89
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	10 82       	st	Z, r1
    267c:	18 c0       	rjmp	.+48     	; 0x26ae <Timer_DeInit+0xe8>


	case Timer2:

		/*Clear all register in Timer2*/
		TIMER2_CONTROL_REGIRSTER        &= 0X00;
    267e:	e5 e4       	ldi	r30, 0x45	; 69
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	e5 e4       	ldi	r30, 0x45	; 69
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	10 82       	st	Z, r1
		TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    268a:	e4 e4       	ldi	r30, 0x44	; 68
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	90 81       	ld	r25, Z
    2690:	e4 e4       	ldi	r30, 0x44	; 68
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	10 82       	st	Z, r1
		TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    2696:	e3 e4       	ldi	r30, 0x43	; 67
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	20 81       	ld	r18, Z
    269c:	e3 e4       	ldi	r30, 0x43	; 67
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	10 82       	st	Z, r1
		TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    26a2:	e9 e5       	ldi	r30, 0x59	; 89
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	30 81       	ld	r19, Z
    26a8:	e9 e5       	ldi	r30, 0x59	; 89
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	10 82       	st	Z, r1
		break;

	} /*End of the switch case*/


}/*end of the Timer_DeInit function*/
    26ae:	62 96       	adiw	r28, 0x12	; 18
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <__prologue_saves__>:
    26c0:	2f 92       	push	r2
    26c2:	3f 92       	push	r3
    26c4:	4f 92       	push	r4
    26c6:	5f 92       	push	r5
    26c8:	6f 92       	push	r6
    26ca:	7f 92       	push	r7
    26cc:	8f 92       	push	r8
    26ce:	9f 92       	push	r9
    26d0:	af 92       	push	r10
    26d2:	bf 92       	push	r11
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	ca 1b       	sub	r28, r26
    26ea:	db 0b       	sbc	r29, r27
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	09 94       	ijmp

000026f8 <__epilogue_restores__>:
    26f8:	2a 88       	ldd	r2, Y+18	; 0x12
    26fa:	39 88       	ldd	r3, Y+17	; 0x11
    26fc:	48 88       	ldd	r4, Y+16	; 0x10
    26fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2700:	6e 84       	ldd	r6, Y+14	; 0x0e
    2702:	7d 84       	ldd	r7, Y+13	; 0x0d
    2704:	8c 84       	ldd	r8, Y+12	; 0x0c
    2706:	9b 84       	ldd	r9, Y+11	; 0x0b
    2708:	aa 84       	ldd	r10, Y+10	; 0x0a
    270a:	b9 84       	ldd	r11, Y+9	; 0x09
    270c:	c8 84       	ldd	r12, Y+8	; 0x08
    270e:	df 80       	ldd	r13, Y+7	; 0x07
    2710:	ee 80       	ldd	r14, Y+6	; 0x06
    2712:	fd 80       	ldd	r15, Y+5	; 0x05
    2714:	0c 81       	ldd	r16, Y+4	; 0x04
    2716:	1b 81       	ldd	r17, Y+3	; 0x03
    2718:	aa 81       	ldd	r26, Y+2	; 0x02
    271a:	b9 81       	ldd	r27, Y+1	; 0x01
    271c:	ce 0f       	add	r28, r30
    271e:	d1 1d       	adc	r29, r1
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	ed 01       	movw	r28, r26
    272c:	08 95       	ret

0000272e <itoa>:
    272e:	fb 01       	movw	r30, r22
    2730:	9f 01       	movw	r18, r30
    2732:	e8 94       	clt
    2734:	42 30       	cpi	r20, 0x02	; 2
    2736:	c4 f0       	brlt	.+48     	; 0x2768 <itoa+0x3a>
    2738:	45 32       	cpi	r20, 0x25	; 37
    273a:	b4 f4       	brge	.+44     	; 0x2768 <itoa+0x3a>
    273c:	4a 30       	cpi	r20, 0x0A	; 10
    273e:	29 f4       	brne	.+10     	; 0x274a <itoa+0x1c>
    2740:	97 fb       	bst	r25, 7
    2742:	1e f4       	brtc	.+6      	; 0x274a <itoa+0x1c>
    2744:	90 95       	com	r25
    2746:	81 95       	neg	r24
    2748:	9f 4f       	sbci	r25, 0xFF	; 255
    274a:	64 2f       	mov	r22, r20
    274c:	77 27       	eor	r23, r23
    274e:	0e 94 c8 13 	call	0x2790	; 0x2790 <__udivmodhi4>
    2752:	80 5d       	subi	r24, 0xD0	; 208
    2754:	8a 33       	cpi	r24, 0x3A	; 58
    2756:	0c f0       	brlt	.+2      	; 0x275a <itoa+0x2c>
    2758:	89 5d       	subi	r24, 0xD9	; 217
    275a:	81 93       	st	Z+, r24
    275c:	cb 01       	movw	r24, r22
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	a1 f7       	brne	.-24     	; 0x274a <itoa+0x1c>
    2762:	16 f4       	brtc	.+4      	; 0x2768 <itoa+0x3a>
    2764:	5d e2       	ldi	r21, 0x2D	; 45
    2766:	51 93       	st	Z+, r21
    2768:	10 82       	st	Z, r1
    276a:	c9 01       	movw	r24, r18
    276c:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <strrev>

00002770 <strrev>:
    2770:	dc 01       	movw	r26, r24
    2772:	fc 01       	movw	r30, r24
    2774:	67 2f       	mov	r22, r23
    2776:	71 91       	ld	r23, Z+
    2778:	77 23       	and	r23, r23
    277a:	e1 f7       	brne	.-8      	; 0x2774 <strrev+0x4>
    277c:	32 97       	sbiw	r30, 0x02	; 2
    277e:	04 c0       	rjmp	.+8      	; 0x2788 <strrev+0x18>
    2780:	7c 91       	ld	r23, X
    2782:	6d 93       	st	X+, r22
    2784:	70 83       	st	Z, r23
    2786:	62 91       	ld	r22, -Z
    2788:	ae 17       	cp	r26, r30
    278a:	bf 07       	cpc	r27, r31
    278c:	c8 f3       	brcs	.-14     	; 0x2780 <strrev+0x10>
    278e:	08 95       	ret

00002790 <__udivmodhi4>:
    2790:	aa 1b       	sub	r26, r26
    2792:	bb 1b       	sub	r27, r27
    2794:	51 e1       	ldi	r21, 0x11	; 17
    2796:	07 c0       	rjmp	.+14     	; 0x27a6 <__udivmodhi4_ep>

00002798 <__udivmodhi4_loop>:
    2798:	aa 1f       	adc	r26, r26
    279a:	bb 1f       	adc	r27, r27
    279c:	a6 17       	cp	r26, r22
    279e:	b7 07       	cpc	r27, r23
    27a0:	10 f0       	brcs	.+4      	; 0x27a6 <__udivmodhi4_ep>
    27a2:	a6 1b       	sub	r26, r22
    27a4:	b7 0b       	sbc	r27, r23

000027a6 <__udivmodhi4_ep>:
    27a6:	88 1f       	adc	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	5a 95       	dec	r21
    27ac:	a9 f7       	brne	.-22     	; 0x2798 <__udivmodhi4_loop>
    27ae:	80 95       	com	r24
    27b0:	90 95       	com	r25
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	08 95       	ret

000027b8 <_exit>:
    27b8:	f8 94       	cli

000027ba <__stop_program>:
    27ba:	ff cf       	rjmp	.-2      	; 0x27ba <__stop_program>
